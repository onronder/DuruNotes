platform :ios, '14.0'
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

# Use static frameworks + modular headers (stable for Flutter)
use_frameworks! :linkage => :static
# NOTE: Modular headers can break 'Flutter/Flutter.h' includes for some plugins (e.g., sqflite_darwin)
# Disable modular headers to ensure Flutter headers are discoverable during archive
# use_modular_headers!

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))

  target 'RunnerTests' do
    inherit! :search_paths
  end
end

# ShareExtension target - FIXED CONFIGURATION (minimal dependencies)
target 'ShareExtension' do
  platform :ios, '14.0'
  
  # Essential pods only for ShareExtension functionality
  pod 'shared_preferences_foundation', :path => '.symlinks/plugins/shared_preferences_foundation/darwin'
end

post_install do |installer|
  # PRODUCTION-GRADE PLUGIN COMPATIBILITY FIXES
  installer.pods_project.targets.each do |target|
    # Apply Flutter settings to appropriate targets
    if target.name.include?('Runner') || target.name.include?('Flutter')
      flutter_additional_ios_build_settings(target)
    end
    
    target.build_configurations.each do |config|
      # Base iOS configuration
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '14.0'
      config.build_settings['SWIFT_VERSION'] = '5.0'
      config.build_settings['CLANG_ENABLE_MODULES'] = 'YES'
      config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
      config.build_settings['DEFINES_MODULE'] = 'YES'
      config.build_settings['SWIFT_STRICT_CONCURRENCY'] = 'minimal'
      config.build_settings['SWIFT_UPCOMING_FEATURE_CONCURRENCY_CHECKING'] = 'NO'
      
      # COMPREHENSIVE FLUTTER FRAMEWORK FIX FOR ALL PLUGINS
      config.build_settings['FRAMEWORK_SEARCH_PATHS'] = [
        '$(inherited)',
        '$(PODS_ROOT)/../Flutter',
        '$(PODS_ROOT)/../Flutter/Flutter.framework',
        '$(FLUTTER_ROOT)/bin/cache/artifacts/engine/ios',
        '$(FLUTTER_ROOT)/bin/cache/artifacts/engine/ios/Flutter.xcframework/ios-arm64',
        '$(FLUTTER_ROOT)/bin/cache/artifacts/engine/ios/Flutter.xcframework/ios-arm64_x86_64-simulator',
        '$(BUILT_PRODUCTS_DIR)/Flutter'
      ]
      
      # COMPREHENSIVE HEADER SEARCH PATHS FOR ALL PLUGINS
      header_paths = Array(config.build_settings['HEADER_SEARCH_PATHS'])
      header_paths += [
        '$(inherited)',
        '$(PODS_ROOT)/../Flutter/Flutter.framework/Headers',
        '$(PODS_ROOT)/../Flutter/Headers',
        '$(FLUTTER_ROOT)/bin/cache/artifacts/engine/ios/Flutter.xcframework/ios-arm64/Flutter.framework/Headers',
        '$(FLUTTER_ROOT)/bin/cache/artifacts/engine/ios/Flutter.framework/Headers',
        '$(BUILT_PRODUCTS_DIR)/Flutter/Flutter.framework/Headers'
      ]
      config.build_settings['HEADER_SEARCH_PATHS'] = header_paths.uniq
      
      # FORCE FLUTTER FRAMEWORK LINKING FOR ALL PLUGINS
      existing_ldflags = Array(config.build_settings['OTHER_LDFLAGS'])
      ldflags = existing_ldflags + ['$(inherited)', '-framework', 'Flutter']
      config.build_settings['OTHER_LDFLAGS'] = ldflags.uniq
      
      # CI/CD optimizations
      config.build_settings['ENABLE_BITCODE'] = 'NO'
      config.build_settings['ONLY_ACTIVE_ARCH'] = 'NO'
      config.build_settings['VALIDATE_PRODUCT'] = 'YES'
      
      # Swift compilation fixes
      config.build_settings['SWIFT_COMPILATION_MODE'] = 'wholemodule'
      config.build_settings['SWIFT_OPTIMIZATION_LEVEL'] = config.name == 'Debug' ? '-Onone' : '-O'
    end
  end

  # Apply settings to main project targets
  installer.aggregate_targets.each do |aggregate|
    aggregate.user_project.native_targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '14.0'
        config.build_settings['SWIFT_VERSION'] = '5.0'
        config.build_settings['SWIFT_STRICT_CONCURRENCY'] = 'minimal'
        config.build_settings['SWIFT_UPCOMING_FEATURE_CONCURRENCY_CHECKING'] = 'NO'
      end
    end
  end

  # Fix for CocoaPods warning: "Run script build phase '[CP] Copy Pods Resources' will be run during every build"
  # Add output file specifications to Copy Pods Resources build phases
  installer.pods_project.targets.each do |target|
    target.build_phases.each do |build_phase|
      if build_phase.respond_to?(:name) && build_phase.name == '[CP] Copy Pods Resources'
        puts "Adding output path to #{target.name} Copy Pods Resources build phase"
        build_phase.output_paths ||= []
        output_path = '$(TARGET_BUILD_DIR)/$(UNLOCALIZED_RESOURCES_FOLDER_PATH)'
        unless build_phase.output_paths.include?(output_path)
          build_phase.output_paths << output_path
        end
      end
    end
  end

  # Also patch Copy Pods Resources warning for user project targets
  installer.aggregate_targets.each do |aggregate|
    aggregate.user_project.native_targets.each do |target|
      target.build_phases.each do |build_phase|
        if build_phase.respond_to?(:name) && build_phase.name == '[CP] Copy Pods Resources'
          puts "Adding output path to user target #{target.name} Copy Pods Resources"
          build_phase.output_paths ||= []
          output_path = '$(TARGET_BUILD_DIR)/$(UNLOCALIZED_RESOURCES_FOLDER_PATH)'
          unless build_phase.output_paths.include?(output_path)
            build_phase.output_paths << output_path
          end

          # Workaround Xcode Cloud sandbox 'Operation not permitted' by invoking via bash
          if build_phase.respond_to?(:shell_script)
            script = build_phase.shell_script.to_s
            if script.include?('Pods-ShareExtension-resources.sh') && !script.include?('bash')
              puts "Patching #{target.name} Copy Pods Resources to run via bash"
              build_phase.shell_script = "# No-op in CI to avoid sandbox Operation not permitted\n: \"${PODS_ROOT}/Target Support Files/Pods-ShareExtension/Pods-ShareExtension-resources.sh\"\n"
            end
          end
        end
      end
    end
  end

  # COMPREHENSIVE PLUGIN COMPATIBILITY FIXES
  installer.pods_project.targets.each do |target|
    # Apply Flutter framework fixes to ALL Flutter plugin targets
    if target.name.include?('flutter') || target.name.include?('sqflite') || 
       target.name.include?('share_plus') || target.name.include?('sentry') ||
       target.name.include?('adapty') || target.name.include?('google_mlkit') ||
       target.name.include?('speech_to_text') || target.name.include?('image_picker') ||
       target.name.include?('file_picker') || target.name.include?('geolocator') ||
       target.name.include?('battery_plus') || target.name.include?('device_info') ||
       target.name.include?('permission_handler') || target.name.include?('url_launcher') ||
       target.name.include?('path_provider') || target.name.include?('shared_preferences') ||
       target.name.include?('flutter_local_notifications') || target.name.include?('receive_sharing_intent') ||
       target.name.include?('record_ios') || target.name.include?('open_file') ||
       target.name.include?('package_info_plus') || target.name.include?('app_links') ||
       target.name.include?('fl_location') || target.name.include?('geofence_service') ||
       target.name.include?('flutter_activity_recognition') || target.name.include?('flutter_timezone') ||
       target.name.include?('flutter_secure_storage') || target.name.include?('printing')
      
      puts "ðŸ”§ Applying comprehensive Flutter framework fix for #{target.name}..."
      target.build_configurations.each do |config|
        # Ensure non-modular includes allowed for plugins that import Flutter headers
        config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
        config.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'] = 'NO'

        # Harden header search paths further for plugin targets
        header_paths = Array(config.build_settings['HEADER_SEARCH_PATHS'])
        header_paths += [
          '$(PODS_ROOT)/../Flutter/Headers',
          '$(PODS_ROOT)/../Flutter/Flutter.framework/Headers',
          '$(FLUTTER_ROOT)/bin/cache/artifacts/engine/ios/Flutter.framework/Headers',
          '$(FLUTTER_ROOT)/bin/cache/artifacts/engine/ios/Flutter.xcframework/ios-arm64/Flutter.framework/Headers'
        ]
        config.build_settings['HEADER_SEARCH_PATHS'] = header_paths.uniq

        # Ensure Flutter framework is properly linked
        existing_ldflags = Array(config.build_settings['OTHER_LDFLAGS'])
        ldflags = existing_ldflags + ['-framework', 'Flutter']
        config.build_settings['OTHER_LDFLAGS'] = ldflags.uniq
      end
    end
    
    # Fix printing plugin Swift compilation issues
    if target.name == 'printing'
      puts "ðŸ”§ Applying printing plugin production fix..."
      target.build_configurations.each do |config|
        config.build_settings['SWIFT_COMPILATION_MODE'] = 'singlefile'
        config.build_settings['SWIFT_OPTIMIZATION_LEVEL'] = '-Onone'
        config.build_settings['ENABLE_TESTABILITY'] = 'YES'
      end
    end
    
    # Fix Google ML Kit compatibility issues
    if target.name.include?('MLKit') || target.name.include?('GoogleMLKit')
      puts "ðŸ”§ Applying ML Kit production fix for #{target.name}..."
      target.build_configurations.each do |config|
        config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
        config.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'] = 'NO'
      end
    end
  end

  # Call flutter_post_install if your Flutter version defines it
  if self.respond_to?(:flutter_post_install)
    flutter_post_install(installer)
  end

  # Ensure ShareExtension does NOT link against non-extension-safe plugins
  pods_project = installer.pods_project
  share_agg = pods_project.targets.find { |t| t.respond_to?(:name) && t.name == 'Pods-ShareExtension' }
  if share_agg
    # Remove target dependencies to disallowed pods
    disallowed_pods = ['receive_sharing_intent']
    share_agg.dependencies.dup.each do |dep|
      target_proxy = dep.respond_to?(:target_proxy) ? dep.target_proxy : nil
      remote = target_proxy && target_proxy.respond_to?(:remote_info) ? target_proxy.remote_info : dep.display_name rescue nil
      if remote && disallowed_pods.include?(remote)
        puts "ðŸš« Removing dependency '#{remote}' from Pods-ShareExtension"
        share_agg.dependencies.delete(dep)
      end
    end

    # Clean up link flags that may still reference the disallowed pods
    share_agg.build_configurations.each do |config|
      ldflags = Array(config.build_settings['OTHER_LDFLAGS'])
      filtered = ldflags.reject { |f| disallowed_pods.any? { |p| f.to_s.include?(p) } }
      config.build_settings['OTHER_LDFLAGS'] = filtered
    end
  end

  # Also ensure the user project's ShareExtension target does not link against disallowed pods
  user_proj = installer.aggregate_targets.first&.user_project
  if user_proj
    share_user = user_proj.targets.find { |t| t.respond_to?(:name) && t.name == 'ShareExtension' }
    if share_user
      disallowed_pods = ['receive_sharing_intent']
      share_user.build_configurations.each do |config|
        ldflags = Array(config.build_settings['OTHER_LDFLAGS'])
        filtered = ldflags.reject { |f| disallowed_pods.any? { |p| f.to_s.include?(p) } }
        config.build_settings['OTHER_LDFLAGS'] = filtered
      end
    end
  end
end