platform :ios, '15.0'
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))

  target 'RunnerTests' do
    inherit! :search_paths
  end
end

require 'set'

post_install do |installer|
  flutter_post_install(installer) if defined?(flutter_post_install)

  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
  end

  # Prevent the Runner target's resource script from introducing build cycles by
  # touching a temp file instead of the bundle output directory.
  resources_script = File.join(installer.sandbox.root, 'Target Support Files', 'Pods-Runner', 'Pods-Runner-resources.sh')
  if File.exist?(resources_script)
    script_contents = File.read(resources_script)
    touch_snippet = %(if [[ -n "${TARGET_TEMP_DIR}" ]]; then\n  touch "${TARGET_TEMP_DIR}/Pods-Runner-copy-resources-${CONFIGURATION}.txt"\nfi\n)
    unless script_contents.include?(touch_snippet)
      File.open(resources_script, 'a') { |f| f << "\n#{touch_snippet}" }
    end
  end

  marker = '${TARGET_TEMP_DIR}/Pods-Runner-copy-resources-${CONFIGURATION}.txt'

  modified_projects = Set.new

  installer.aggregate_targets.each do |aggregate_target|
    next unless aggregate_target.name == 'Pods-Runner'

    aggregate_target.user_targets.each do |user_target|
      next unless user_target.respond_to?(:shell_script_build_phases)

      resources_phase = user_target.shell_script_build_phases.find do |phase|
        phase.name == '[CP] Copy Pods Resources'
      end
      next unless resources_phase

      existing_outputs = resources_phase.output_paths || []
      unless existing_outputs.include?(marker)
        resources_phase.output_paths = (existing_outputs + [marker])
        modified_projects << user_target.project
      end
    end
  end

  support_files_dir = File.join(installer.sandbox.root, 'Target Support Files', 'Pods-Runner')
  %w[Debug Release Profile].each do |configuration|
    stamp_path = File.join(support_files_dir, "Pods-Runner-resources-#{configuration}-stamp.xcfilelist")
    File.write(stamp_path, "${TARGET_TEMP_DIR}/Pods-Runner-copy-resources-#{configuration}.txt\n")
  end

  modified_projects.each do |project|
    project.mark_dirty!
    project.save
  end
end
