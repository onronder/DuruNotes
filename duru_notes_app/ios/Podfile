platform :ios, '14.0'
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

# Use static frameworks + modular headers (stable for Flutter)
use_frameworks! :linkage => :static
use_modular_headers!

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

target 'Runner' do
  # Flutter Engine - Manual specification
  pod 'Flutter', :path => 'Flutter'
  
  # Critical Production Dependencies
  
  # Error Reporting - Sentry
  pod 'sentry_flutter', :path => '.symlinks/plugins/sentry_flutter/ios'
  pod 'Sentry/HybridSDK', '8.52.1'
  
  # Subscription Management - Adapty
  pod 'adapty_flutter', :path => '.symlinks/plugins/adapty_flutter/ios'
  pod 'Adapty', '3.10.1'
  pod 'AdaptyPlugin', '3.10.1'
  pod 'AdaptyUI', '3.10.1'
  
  # Database - SQLite
  pod 'sqlite3_flutter_libs', :path => '.symlinks/plugins/sqlite3_flutter_libs/darwin'
  pod 'sqlite3', '~> 3.50.4'
  pod 'sqlite3/fts5'
  pod 'sqlite3/perf-threadsafe'
  pod 'sqlite3/rtree'
  pod 'sqlite3/dbstatvtab'
  pod 'sqlite3/math'
  pod 'sqlite3/session'
  
  # ML Kit OCR - Text Recognition
  pod 'google_mlkit_text_recognition', :path => '.symlinks/plugins/google_mlkit_text_recognition/ios'
  pod 'google_mlkit_commons', :path => '.symlinks/plugins/google_mlkit_commons/ios'
  pod 'GoogleMLKit/TextRecognition', '~> 4.0.0'
  pod 'MLKitTextRecognition', '~> 2.0.0'
  pod 'MLKitTextRecognitionCommon', '1.0.0'
  pod 'MLKitVision', '~> 5.0'
  pod 'MLKitCommon', '~> 9.0.0'
  pod 'MLImage', '1.0.0-beta4'
  pod 'GoogleDataTransport', '~> 9.0'
  pod 'GoogleToolboxForMac/Logger', '~> 2.1'
  pod 'GoogleToolboxForMac/NSData+zlib', '~> 2.1'
  pod 'GoogleToolboxForMac/NSDictionary+URLArguments', '~> 2.1'
  pod 'GoogleUtilities/UserDefaults', '~> 7.0'
  pod 'GoogleUtilitiesComponents', '~> 1.0'
  pod 'GTMSessionFetcher/Core', '< 3.0, >= 1.1'
  
  # Location Services - Geofencing & GPS
  pod 'geofence_service', :path => '.symlinks/plugins/geofence_service/ios'
  pod 'fl_location', :path => '.symlinks/plugins/fl_location/ios'
  pod 'flutter_activity_recognition', :path => '.symlinks/plugins/flutter_activity_recognition/ios'
  pod 'geolocator_apple', :path => '.symlinks/plugins/geolocator_apple/darwin'
  
  # Media & File Handling
  pod 'image_picker_ios', :path => '.symlinks/plugins/image_picker_ios/ios'
  pod 'file_picker', :path => '.symlinks/plugins/file_picker/ios'
  pod 'DKImagePickerController/PhotoGallery', '~> 4.3.9'
  pod 'DKPhotoGallery', '0.0.19'
  pod 'SDWebImage', '~> 5.21.2'
  pod 'SwiftyGif', '~> 5.4.5'
  pod 'DKImagePickerController/Core'
  pod 'DKImagePickerController/ImageDataManager'
  pod 'DKImagePickerController/Resource'
  pod 'DKPhotoGallery/Core'
  pod 'DKPhotoGallery/Model'
  pod 'DKPhotoGallery/Preview'
  pod 'DKPhotoGallery/Resource'
  
  # Audio Recording & Speech Recognition
  pod 'record_ios', :path => '.symlinks/plugins/record_ios/ios'
  pod 'speech_to_text', :path => '.symlinks/plugins/speech_to_text/darwin'
  pod 'CwlCatchException', '~> 2.2.1'
  pod 'CwlCatchExceptionSupport', '~> 2.2.1'
  
  # System Integration
  pod 'flutter_local_notifications', :path => '.symlinks/plugins/flutter_local_notifications/ios'
  pod 'permission_handler_apple', :path => '.symlinks/plugins/permission_handler_apple/ios'
  pod 'receive_sharing_intent', :path => '.symlinks/plugins/receive_sharing_intent/ios'
  
  # Storage & Data Management
  pod 'flutter_secure_storage', :path => '.symlinks/plugins/flutter_secure_storage/ios'
  pod 'shared_preferences_foundation', :path => '.symlinks/plugins/shared_preferences_foundation/darwin'
  pod 'path_provider_foundation', :path => '.symlinks/plugins/path_provider_foundation/darwin'
  
  # Cryptography & Security
  pod 'cryptography', :path => '.symlinks/plugins/cryptography/ios'
  
  # Document & PDF Generation
  pod 'printing', :path => '.symlinks/plugins/printing/ios'
  
  # Backend Integration - Supabase
  pod 'supabase_flutter', :path => '.symlinks/plugins/supabase_flutter/ios'
  
  # Utilities
  pod 'url_launcher_ios', :path => '.symlinks/plugins/url_launcher_ios/ios'
  pod 'package_info_plus', :path => '.symlinks/plugins/package_info_plus/ios'
  pod 'device_info_plus', :path => '.symlinks/plugins/device_info_plus/ios'
  pod 'battery_plus', :path => '.symlinks/plugins/battery_plus/ios'
  pod 'flutter_timezone', :path => '.symlinks/plugins/flutter_timezone/ios'
  pod 'share_plus', :path => '.symlinks/plugins/share_plus/ios'
  pod 'open_file_ios', :path => '.symlinks/plugins/open_file_ios/ios'
  
  # Flutter Core Dependencies
  pod 'flutter_localizations', :path => 'Flutter/flutter_localizations'
  pod 'integration_test', :path => '.symlinks/plugins/integration_test/ios'
  
  target 'RunnerTests' do
    inherit! :search_paths
  end
end

# ShareExtension target - FIXED CONFIGURATION (minimal dependencies)
target 'ShareExtension' do
  platform :ios, '14.0'
  
  # Essential pods only for ShareExtension functionality
  pod 'receive_sharing_intent', :path => '.symlinks/plugins/receive_sharing_intent/ios'
  pod 'shared_preferences_foundation', :path => '.symlinks/plugins/shared_preferences_foundation/darwin'
end

post_install do |installer|
  # Manual build settings configuration - replacing flutter_additional_ios_build_settings
  installer.pods_project.targets.each do |target|
    # Apply critical Flutter settings manually
    if target.name.include?('Runner') || target.name.include?('Flutter')
      target.build_configurations.each do |config|
        # Flutter-specific settings
        config.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'] = 'NO'
        config.build_settings['MTL_ENABLE_DEBUG_INFO'] = 'YES' if config.name == 'Debug'
        config.build_settings['MTL_ENABLE_DEBUG_INFO'] = 'NO' if config.name != 'Debug'
        config.build_settings['ENABLE_NS_ASSERTIONS'] = 'YES' if config.name == 'Debug'
        config.build_settings['ENABLE_NS_ASSERTIONS'] = 'NO' if config.name != 'Debug'
        config.build_settings['GCC_C_LANGUAGE_STANDARD'] = 'gnu11'
        config.build_settings['GCC_NO_COMMON_BLOCKS'] = 'YES'
        config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'gnu++14'
        config.build_settings['CLANG_CXX_LIBRARY'] = 'libc++'
        config.build_settings['CLANG_ENABLE_MODULES'] = 'YES'
        config.build_settings['CLANG_ENABLE_OBJC_ARC'] = 'YES'
        config.build_settings['CLANG_ENABLE_OBJC_WEAK'] = 'YES'
        config.build_settings['CLANG_WARN_DIRECT_OBJC_ISA_USAGE'] = 'YES_ERROR'
        config.build_settings['CLANG_WARN_DOCUMENTATION_COMMENTS'] = 'YES'
        config.build_settings['CLANG_WARN_EMPTY_BODY'] = 'YES'
        config.build_settings['CLANG_WARN_ENUM_CONVERSION'] = 'YES'
        config.build_settings['CLANG_WARN_INFINITE_RECURSION'] = 'YES'
        config.build_settings['CLANG_WARN_INT_CONVERSION'] = 'YES'
        config.build_settings['CLANG_WARN_NON_LITERAL_NULL_CONVERSION'] = 'YES'
        config.build_settings['CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF'] = 'YES'
        config.build_settings['CLANG_WARN_OBJC_LITERAL_CONVERSION'] = 'YES'
        config.build_settings['CLANG_WARN_OBJC_ROOT_CLASS'] = 'YES_ERROR'
        config.build_settings['CLANG_WARN_RANGE_LOOP_ANALYSIS'] = 'YES'
        config.build_settings['CLANG_WARN_STRICT_PROTOTYPES'] = 'YES'
        config.build_settings['CLANG_WARN_SUSPICIOUS_MOVE'] = 'YES'
        config.build_settings['CLANG_WARN_UNGUARDED_AVAILABILITY'] = 'YES_AGGRESSIVE'
        config.build_settings['CLANG_WARN_UNREACHABLE_CODE'] = 'YES'
        config.build_settings['CLANG_WARN__DUPLICATE_METHOD_MATCH'] = 'YES'
        config.build_settings['COPY_PHASE_STRIP'] = 'NO' if config.name == 'Debug'
        config.build_settings['COPY_PHASE_STRIP'] = 'YES' if config.name != 'Debug'
        config.build_settings['DEBUG_INFORMATION_FORMAT'] = 'dwarf' if config.name == 'Debug'
        config.build_settings['DEBUG_INFORMATION_FORMAT'] = 'dwarf-with-dsym' if config.name != 'Debug'
        config.build_settings['ENABLE_STRICT_OBJC_MSGSEND'] = 'YES'
        config.build_settings['ENABLE_TESTABILITY'] = 'YES' if config.name == 'Debug'
        config.build_settings['GCC_C_LANGUAGE_STANDARD'] = 'gnu11'
        config.build_settings['GCC_DYNAMIC_NO_PIC'] = 'NO' if config.name == 'Debug'
        config.build_settings['GCC_NO_COMMON_BLOCKS'] = 'YES'
        config.build_settings['GCC_OPTIMIZATION_LEVEL'] = '0' if config.name == 'Debug'
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] = ['$(inherited)', 'DEBUG=1'] if config.name == 'Debug'
        config.build_settings['GCC_WARN_64_TO_32_BIT_CONVERSION'] = 'YES'
        config.build_settings['GCC_WARN_ABOUT_RETURN_TYPE'] = 'YES_ERROR'
        config.build_settings['GCC_WARN_UNDECLARED_SELECTOR'] = 'YES'
        config.build_settings['GCC_WARN_UNINITIALIZED_AUTOS'] = 'YES_AGGRESSIVE'
        config.build_settings['GCC_WARN_UNUSED_FUNCTION'] = 'YES'
        config.build_settings['GCC_WARN_UNUSED_VARIABLE'] = 'YES'
      end
    end
    
    target.build_configurations.each do |config|
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '14.0'
      config.build_settings['SWIFT_VERSION'] = '5.0'
      config.build_settings['CLANG_ENABLE_MODULES'] = 'YES'
      config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
      config.build_settings['DEFINES_MODULE'] = 'YES'
      config.build_settings['SWIFT_STRICT_CONCURRENCY'] = 'minimal'
      config.build_settings['SWIFT_UPCOMING_FEATURE_CONCURRENCY_CHECKING'] = 'NO'
      
      # CI/CD optimizations
      config.build_settings['ENABLE_BITCODE'] = 'NO'
      config.build_settings['ONLY_ACTIVE_ARCH'] = 'NO'
    end
  end

  # Apply settings to main project targets
  installer.aggregate_targets.each do |aggregate|
    aggregate.user_project.native_targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '14.0'
        config.build_settings['SWIFT_VERSION'] = '5.0'
        config.build_settings['SWIFT_STRICT_CONCURRENCY'] = 'minimal'
        config.build_settings['SWIFT_UPCOMING_FEATURE_CONCURRENCY_CHECKING'] = 'NO'
      end
    end
  end

  # Fix for CocoaPods warning: "Run script build phase '[CP] Copy Pods Resources' will be run during every build"
  # Add output file specifications to Copy Pods Resources build phases
  installer.pods_project.targets.each do |target|
    target.build_phases.each do |build_phase|
      if build_phase.respond_to?(:name) && build_phase.name == '[CP] Copy Pods Resources'
        puts "Adding output files to #{target.name} Copy Pods Resources build phase"
        
        # Add the standard CocoaPods resource output files
        resource_output_files = [
          '${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}',
        ]
        
        # Only add output files if they don't already exist
        existing_output_files = build_phase.output_file_list_paths || []
        resource_output_files.each do |output_file|
          unless existing_output_files.include?(output_file)
            build_phase.output_file_list_paths ||= []
            build_phase.output_file_list_paths << output_file
          end
        end
      end
    end
  end

  # Manual post-install configurations for production-grade build
  # Note: Replaced flutter_post_install with manual settings to ensure compatibility
end
