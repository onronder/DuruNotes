platform :ios, '14.0'
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

# Use static frameworks + modular headers (stable for Flutter)
use_frameworks! :linkage => :static
use_modular_headers!

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))

  target 'RunnerTests' do
    inherit! :search_paths
  end
end

# ShareExtension target - FIXED CONFIGURATION (minimal dependencies)
target 'ShareExtension' do
  platform :ios, '14.0'
  
  # Essential pods only for ShareExtension functionality
  pod 'receive_sharing_intent', :path => '.symlinks/plugins/receive_sharing_intent/ios'
  pod 'shared_preferences_foundation', :path => '.symlinks/plugins/shared_preferences_foundation/darwin'
end

post_install do |installer|
  # Apply Flutter's extra settings - ONLY to Flutter targets, not ShareExtension
  installer.pods_project.targets.each do |target|
    # Only apply Flutter settings to targets that need them
    if target.name.include?('Runner') || target.name.include?('Flutter')
      flutter_additional_ios_build_settings(target)
    end
    
    target.build_configurations.each do |config|
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '14.0'
      config.build_settings['SWIFT_VERSION'] = '5.0'
      config.build_settings['CLANG_ENABLE_MODULES'] = 'YES'
      config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
      config.build_settings['DEFINES_MODULE'] = 'YES'
      config.build_settings['SWIFT_STRICT_CONCURRENCY'] = 'minimal'
      config.build_settings['SWIFT_UPCOMING_FEATURE_CONCURRENCY_CHECKING'] = 'NO'
      
      # CI/CD optimizations
      config.build_settings['ENABLE_BITCODE'] = 'NO'
      config.build_settings['ONLY_ACTIVE_ARCH'] = 'NO'
    end
  end

  # Apply settings to main project targets
  installer.aggregate_targets.each do |aggregate|
    aggregate.user_project.native_targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '14.0'
        config.build_settings['SWIFT_VERSION'] = '5.0'
        config.build_settings['SWIFT_STRICT_CONCURRENCY'] = 'minimal'
        config.build_settings['SWIFT_UPCOMING_FEATURE_CONCURRENCY_CHECKING'] = 'NO'
      end
    end
  end

  # Fix for CocoaPods warning: "Run script build phase '[CP] Copy Pods Resources' will be run during every build"
  # Add output file specifications to Copy Pods Resources build phases
  installer.pods_project.targets.each do |target|
    target.build_phases.each do |build_phase|
      if build_phase.respond_to?(:name) && build_phase.name == '[CP] Copy Pods Resources'
        puts "Adding output files to #{target.name} Copy Pods Resources build phase"
        
        # Add the standard CocoaPods resource output files
        resource_output_files = [
          '${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}',
        ]
        
        # Only add output files if they don't already exist
        existing_output_files = build_phase.output_file_list_paths || []
        resource_output_files.each do |output_file|
          unless existing_output_files.include?(output_file)
            build_phase.output_file_list_paths ||= []
            build_phase.output_file_list_paths << output_file
          end
        end
      end
    end
  end

  # Call flutter_post_install if your Flutter version defines it
  if self.respond_to?(:flutter_post_install)
    flutter_post_install(installer)
  end
end
