// Mocks generated by Mockito 5.4.6 from annotations
// in duru_notes_app/test/features/notes/pagination_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:duru_notes_app/core/crypto/crypto_box.dart' as _i3;
import 'package:duru_notes_app/data/local/app_db.dart' as _i2;
import 'package:duru_notes_app/data/remote/supabase_note_api.dart' as _i5;
import 'package:duru_notes_app/repository/notes_repository.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:supabase_flutter/supabase_flutter.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAppDb_0 extends _i1.SmartFake implements _i2.AppDb {
  _FakeAppDb_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCryptoBox_1 extends _i1.SmartFake implements _i3.CryptoBox {
  _FakeCryptoBox_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSupabaseClient_2 extends _i1.SmartFake
    implements _i4.SupabaseClient {
  _FakeSupabaseClient_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSupabaseNoteApi_3 extends _i1.SmartFake
    implements _i5.SupabaseNoteApi {
  _FakeSupabaseNoteApi_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [NotesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotesRepository extends _i1.Mock implements _i6.NotesRepository {
  MockNotesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AppDb get db =>
      (super.noSuchMethod(
            Invocation.getter(#db),
            returnValue: _FakeAppDb_0(this, Invocation.getter(#db)),
          )
          as _i2.AppDb);

  @override
  _i3.CryptoBox get crypto =>
      (super.noSuchMethod(
            Invocation.getter(#crypto),
            returnValue: _FakeCryptoBox_1(this, Invocation.getter(#crypto)),
          )
          as _i3.CryptoBox);

  @override
  _i4.SupabaseClient get client =>
      (super.noSuchMethod(
            Invocation.getter(#client),
            returnValue: _FakeSupabaseClient_2(
              this,
              Invocation.getter(#client),
            ),
          )
          as _i4.SupabaseClient);

  @override
  String get userId =>
      (super.noSuchMethod(
            Invocation.getter(#userId),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.getter(#userId),
            ),
          )
          as String);

  @override
  _i5.SupabaseNoteApi get api =>
      (super.noSuchMethod(
            Invocation.getter(#api),
            returnValue: _FakeSupabaseNoteApi_3(this, Invocation.getter(#api)),
          )
          as _i5.SupabaseNoteApi);

  @override
  _i8.Future<String> createOrUpdate({
    required String? title,
    required String? body,
    String? id,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createOrUpdate, [], {
              #title: title,
              #body: body,
              #id: id,
            }),
            returnValue: _i8.Future<String>.value(
              _i7.dummyValue<String>(
                this,
                Invocation.method(#createOrUpdate, [], {
                  #title: title,
                  #body: body,
                  #id: id,
                }),
              ),
            ),
          )
          as _i8.Future<String>);

  @override
  _i8.Future<void> delete(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [id]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> pushAllPending() =>
      (super.noSuchMethod(
            Invocation.method(#pushAllPending, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> pullSince(DateTime? since) =>
      (super.noSuchMethod(
            Invocation.method(#pullSince, [since]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<Set<String>> fetchRemoteActiveIds() =>
      (super.noSuchMethod(
            Invocation.method(#fetchRemoteActiveIds, []),
            returnValue: _i8.Future<Set<String>>.value(<String>{}),
          )
          as _i8.Future<Set<String>>);

  @override
  _i8.Future<void> reconcileHardDeletes(Set<String>? remoteActiveIds) =>
      (super.noSuchMethod(
            Invocation.method(#reconcileHardDeletes, [remoteActiveIds]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<List<_i2.LocalNote>> list() =>
      (super.noSuchMethod(
            Invocation.method(#list, []),
            returnValue: _i8.Future<List<_i2.LocalNote>>.value(
              <_i2.LocalNote>[],
            ),
          )
          as _i8.Future<List<_i2.LocalNote>>);

  @override
  _i8.Future<List<_i2.LocalNote>> listAfter(
    DateTime? cursor, {
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#listAfter, [cursor], {#limit: limit}),
            returnValue: _i8.Future<List<_i2.LocalNote>>.value(
              <_i2.LocalNote>[],
            ),
          )
          as _i8.Future<List<_i2.LocalNote>>);

  @override
  _i8.Future<List<_i2.LocalNote>> listWithOffset({
    int? limit = 20,
    int? offset = 0,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#listWithOffset, [], {
              #limit: limit,
              #offset: offset,
            }),
            returnValue: _i8.Future<List<_i2.LocalNote>>.value(
              <_i2.LocalNote>[],
            ),
          )
          as _i8.Future<List<_i2.LocalNote>>);
}
