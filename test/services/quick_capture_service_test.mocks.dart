// Mocks generated by Mockito 5.4.6 from annotations
// in duru_notes/test/services/quick_capture_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;
import 'dart:typed_data' as _i13;

import 'package:duru_notes/core/crypto/crypto_box.dart' as _i3;
import 'package:duru_notes/core/monitoring/app_logger.dart' as _i16;
import 'package:duru_notes/data/local/app_db.dart' as _i2;
import 'package:duru_notes/data/remote/supabase_note_api.dart' as _i4;
import 'package:duru_notes/models/note_block.dart' as _i12;
import 'package:duru_notes/repository/notes_repository.dart' as _i8;
import 'package:duru_notes/services/analytics/analytics_service.dart' as _i15;
import 'package:duru_notes/services/attachment_service.dart' as _i11;
import 'package:duru_notes/services/incoming_mail_folder_manager.dart' as _i14;
import 'package:flutter/src/services/binary_messenger.dart' as _i7;
import 'package:flutter/src/services/message_codec.dart' as _i6;
import 'package:flutter/src/services/platform_channel.dart' as _i17;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;
import 'package:supabase_flutter/supabase_flutter.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeAppDb_0 extends _i1.SmartFake implements _i2.AppDb {
  _FakeAppDb_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeCryptoBox_1 extends _i1.SmartFake implements _i3.CryptoBox {
  _FakeCryptoBox_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeSupabaseNoteApi_2 extends _i1.SmartFake
    implements _i4.SupabaseNoteApi {
  _FakeSupabaseNoteApi_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeSupabaseClient_3 extends _i1.SmartFake
    implements _i5.SupabaseClient {
  _FakeSupabaseClient_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeLocalFolder_4 extends _i1.SmartFake implements _i2.LocalFolder {
  _FakeLocalFolder_4(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeMethodCodec_5 extends _i1.SmartFake implements _i6.MethodCodec {
  _FakeMethodCodec_5(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeBinaryMessenger_6 extends _i1.SmartFake
    implements _i7.BinaryMessenger {
  _FakeBinaryMessenger_6(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [NotesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotesRepository extends _i1.Mock implements _i8.NotesRepository {
  MockNotesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AppDb get db => (super.noSuchMethod(
        Invocation.getter(#db),
        returnValue: _FakeAppDb_0(this, Invocation.getter(#db)),
      ) as _i2.AppDb);

  @override
  _i3.CryptoBox get crypto => (super.noSuchMethod(
        Invocation.getter(#crypto),
        returnValue: _FakeCryptoBox_1(this, Invocation.getter(#crypto)),
      ) as _i3.CryptoBox);

  @override
  _i4.SupabaseNoteApi get api => (super.noSuchMethod(
        Invocation.getter(#api),
        returnValue: _FakeSupabaseNoteApi_2(this, Invocation.getter(#api)),
      ) as _i4.SupabaseNoteApi);

  @override
  _i5.SupabaseClient get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeSupabaseClient_3(
          this,
          Invocation.getter(#client),
        ),
      ) as _i5.SupabaseClient);

  @override
  _i9.Future<void> createOrUpdateSavedSearch(_i2.SavedSearch? savedSearch) =>
      (super.noSuchMethod(
        Invocation.method(#createOrUpdateSavedSearch, [savedSearch]),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> deleteSavedSearch(String? id) => (super.noSuchMethod(
        Invocation.method(#deleteSavedSearch, [id]),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<List<_i2.SavedSearch>> getSavedSearches() => (super.noSuchMethod(
        Invocation.method(#getSavedSearches, []),
        returnValue: _i9.Future<List<_i2.SavedSearch>>.value(
          <_i2.SavedSearch>[],
        ),
      ) as _i9.Future<List<_i2.SavedSearch>>);

  @override
  _i9.Stream<List<_i2.SavedSearch>> watchSavedSearches() => (super.noSuchMethod(
        Invocation.method(#watchSavedSearches, []),
        returnValue: _i9.Stream<List<_i2.SavedSearch>>.empty(),
      ) as _i9.Stream<List<_i2.SavedSearch>>);

  @override
  _i9.Future<void> toggleSavedSearchPin(String? id) => (super.noSuchMethod(
        Invocation.method(#toggleSavedSearchPin, [id]),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> trackSavedSearchUsage(String? id) => (super.noSuchMethod(
        Invocation.method(#trackSavedSearchUsage, [id]),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> reorderSavedSearches(List<String>? ids) =>
      (super.noSuchMethod(
        Invocation.method(#reorderSavedSearches, [ids]),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<List<_i2.LocalNote>> executeSavedSearch(
    _i2.SavedSearch? savedSearch,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#executeSavedSearch, [savedSearch]),
        returnValue: _i9.Future<List<_i2.LocalNote>>.value(
          <_i2.LocalNote>[],
        ),
      ) as _i9.Future<List<_i2.LocalNote>>);

  @override
  _i9.Future<void> toggleNotePin(String? noteId) => (super.noSuchMethod(
        Invocation.method(#toggleNotePin, [noteId]),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> setNotePin(String? noteId, bool? isPinned) =>
      (super.noSuchMethod(
        Invocation.method(#setNotePin, [noteId, isPinned]),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<List<_i2.LocalNote>> getPinnedNotes() => (super.noSuchMethod(
        Invocation.method(#getPinnedNotes, []),
        returnValue: _i9.Future<List<_i2.LocalNote>>.value(
          <_i2.LocalNote>[],
        ),
      ) as _i9.Future<List<_i2.LocalNote>>);

  @override
  _i9.Future<List<_i2.TagCount>> listTagsWithCounts() => (super.noSuchMethod(
        Invocation.method(#listTagsWithCounts, []),
        returnValue: _i9.Future<List<_i2.TagCount>>.value(<_i2.TagCount>[]),
      ) as _i9.Future<List<_i2.TagCount>>);

  @override
  _i9.Future<void> addTag({required String? noteId, required String? tag}) =>
      (super.noSuchMethod(
        Invocation.method(#addTag, [], {#noteId: noteId, #tag: tag}),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> removeTag({required String? noteId, required String? tag}) =>
      (super.noSuchMethod(
        Invocation.method(#removeTag, [], {#noteId: noteId, #tag: tag}),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<int> renameTagEverywhere({
    required String? from,
    required String? to,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#renameTagEverywhere, [], {#from: from, #to: to}),
        returnValue: _i9.Future<int>.value(0),
      ) as _i9.Future<int>);

  @override
  _i9.Future<List<_i2.LocalNote>> queryNotesByTags({
    required List<String>? anyTags,
    required _i2.SortSpec? sort,
    List<String>? noneTags = const [],
  }) =>
      (super.noSuchMethod(
        Invocation.method(#queryNotesByTags, [], {
          #anyTags: anyTags,
          #sort: sort,
          #noneTags: noneTags,
        }),
        returnValue: _i9.Future<List<_i2.LocalNote>>.value(
          <_i2.LocalNote>[],
        ),
      ) as _i9.Future<List<_i2.LocalNote>>);

  @override
  _i9.Future<List<String>> searchTags(String? prefix) => (super.noSuchMethod(
        Invocation.method(#searchTags, [prefix]),
        returnValue: _i9.Future<List<String>>.value(<String>[]),
      ) as _i9.Future<List<String>>);

  @override
  _i9.Future<List<String>> getTagsForNote(String? noteId) =>
      (super.noSuchMethod(
        Invocation.method(#getTagsForNote, [noteId]),
        returnValue: _i9.Future<List<String>>.value(<String>[]),
      ) as _i9.Future<List<String>>);

  @override
  _i9.Future<_i2.LocalNote?> getLocalNoteById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(#getLocalNoteById, [id]),
        returnValue: _i9.Future<_i2.LocalNote?>.value(),
      ) as _i9.Future<_i2.LocalNote?>);

  @override
  _i9.Future<_i2.LocalNote?> getNote(String? id) => (super.noSuchMethod(
        Invocation.method(#getNote, [id]),
        returnValue: _i9.Future<_i2.LocalNote?>.value(),
      ) as _i9.Future<_i2.LocalNote?>);

  @override
  _i9.Future<_i2.LocalNote?> getNoteById(String? id) => (super.noSuchMethod(
        Invocation.method(#getNoteById, [id]),
        returnValue: _i9.Future<_i2.LocalNote?>.value(),
      ) as _i9.Future<_i2.LocalNote?>);

  @override
  _i9.Future<_i2.LocalNote?> createNote({
    required String? title,
    required String? body,
    String? folderId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#createNote, [], {
          #title: title,
          #body: body,
          #folderId: folderId,
        }),
        returnValue: _i9.Future<_i2.LocalNote?>.value(),
      ) as _i9.Future<_i2.LocalNote?>);

  @override
  _i9.Future<_i2.LocalNote?> updateNote(
    String? id, {
    required String? title,
    required String? body,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#updateNote, [id], {#title: title, #body: body}),
        returnValue: _i9.Future<_i2.LocalNote?>.value(),
      ) as _i9.Future<_i2.LocalNote?>);

  @override
  _i9.Future<_i2.LocalNote?> createOrUpdate({
    required String? title,
    required String? body,
    String? id,
    DateTime? updatedAt,
    Set<String>? tags = const {},
    List<Map<String, String?>>? links = const [],
    Map<String, dynamic>? attachmentMeta,
    Map<String, dynamic>? metadataJson,
    bool? isPinned,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#createOrUpdate, [], {
          #title: title,
          #body: body,
          #id: id,
          #updatedAt: updatedAt,
          #tags: tags,
          #links: links,
          #attachmentMeta: attachmentMeta,
          #metadataJson: metadataJson,
          #isPinned: isPinned,
        }),
        returnValue: _i9.Future<_i2.LocalNote?>.value(),
      ) as _i9.Future<_i2.LocalNote?>);

  @override
  _i9.Future<List<_i2.LocalNote>> getRecentlyViewedNotes({int? limit = 5}) =>
      (super.noSuchMethod(
        Invocation.method(#getRecentlyViewedNotes, [], {#limit: limit}),
        returnValue: _i9.Future<List<_i2.LocalNote>>.value(
          <_i2.LocalNote>[],
        ),
      ) as _i9.Future<List<_i2.LocalNote>>);

  @override
  _i9.Future<List<_i2.LocalNote>> localNotes() => (super.noSuchMethod(
        Invocation.method(#localNotes, []),
        returnValue: _i9.Future<List<_i2.LocalNote>>.value(
          <_i2.LocalNote>[],
        ),
      ) as _i9.Future<List<_i2.LocalNote>>);

  @override
  _i9.Future<List<_i2.LocalNote>> listAfter(
    DateTime? cursor, {
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#listAfter, [cursor], {#limit: limit}),
        returnValue: _i9.Future<List<_i2.LocalNote>>.value(
          <_i2.LocalNote>[],
        ),
      ) as _i9.Future<List<_i2.LocalNote>>);

  @override
  _i9.Future<void> updateLocalNote(
    String? id, {
    String? title,
    String? body,
    bool? deleted,
    DateTime? updatedAt,
    Map<String, dynamic>? attachmentMeta,
    Set<String>? tags,
    List<Map<String, String?>>? links,
    bool? isPinned,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateLocalNote,
          [id],
          {
            #title: title,
            #body: body,
            #deleted: deleted,
            #updatedAt: updatedAt,
            #attachmentMeta: attachmentMeta,
            #tags: tags,
            #links: links,
            #isPinned: isPinned,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> deleteNote(String? id) => (super.noSuchMethod(
        Invocation.method(#deleteNote, [id]),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(#delete, [id]),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<List<_i2.LocalNote>> listTemplates() => (super.noSuchMethod(
        Invocation.method(#listTemplates, []),
        returnValue: _i9.Future<List<_i2.LocalNote>>.value(
          <_i2.LocalNote>[],
        ),
      ) as _i9.Future<List<_i2.LocalNote>>);

  @override
  _i9.Future<_i2.LocalNote?> createTemplate({
    required String? title,
    required String? body,
    List<String>? tags = const [],
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#createTemplate, [], {
          #title: title,
          #body: body,
          #tags: tags,
          #metadata: metadata,
        }),
        returnValue: _i9.Future<_i2.LocalNote?>.value(),
      ) as _i9.Future<_i2.LocalNote?>);

  @override
  _i9.Future<_i2.LocalNote?> createNoteFromTemplate(String? templateId) =>
      (super.noSuchMethod(
        Invocation.method(#createNoteFromTemplate, [templateId]),
        returnValue: _i9.Future<_i2.LocalNote?>.value(),
      ) as _i9.Future<_i2.LocalNote?>);

  @override
  _i9.Future<bool> deleteTemplate(String? templateId) => (super.noSuchMethod(
        Invocation.method(#deleteTemplate, [templateId]),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<_i2.LocalFolder?> getFolder(String? id) => (super.noSuchMethod(
        Invocation.method(#getFolder, [id]),
        returnValue: _i9.Future<_i2.LocalFolder?>.value(),
      ) as _i9.Future<_i2.LocalFolder?>);

  @override
  _i9.Future<List<_i2.LocalFolder>> listFolders() => (super.noSuchMethod(
        Invocation.method(#listFolders, []),
        returnValue: _i9.Future<List<_i2.LocalFolder>>.value(
          <_i2.LocalFolder>[],
        ),
      ) as _i9.Future<List<_i2.LocalFolder>>);

  @override
  _i9.Future<List<_i2.LocalFolder>> getRootFolders() => (super.noSuchMethod(
        Invocation.method(#getRootFolders, []),
        returnValue: _i9.Future<List<_i2.LocalFolder>>.value(
          <_i2.LocalFolder>[],
        ),
      ) as _i9.Future<List<_i2.LocalFolder>>);

  @override
  _i9.Future<String> createOrUpdateFolder({
    required String? name,
    String? id,
    String? parentId,
    String? color,
    String? icon,
    String? description,
    int? sortOrder,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#createOrUpdateFolder, [], {
          #name: name,
          #id: id,
          #parentId: parentId,
          #color: color,
          #icon: icon,
          #description: description,
          #sortOrder: sortOrder,
        }),
        returnValue: _i9.Future<String>.value(
          _i10.dummyValue<String>(
            this,
            Invocation.method(#createOrUpdateFolder, [], {
              #name: name,
              #id: id,
              #parentId: parentId,
              #color: color,
              #icon: icon,
              #description: description,
              #sortOrder: sortOrder,
            }),
          ),
        ),
      ) as _i9.Future<String>);

  @override
  _i9.Future<_i2.LocalFolder> createFolder({
    required String? name,
    String? parentId,
    String? color,
    String? icon,
    String? description,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#createFolder, [], {
          #name: name,
          #parentId: parentId,
          #color: color,
          #icon: icon,
          #description: description,
        }),
        returnValue: _i9.Future<_i2.LocalFolder>.value(
          _FakeLocalFolder_4(
            this,
            Invocation.method(#createFolder, [], {
              #name: name,
              #parentId: parentId,
              #color: color,
              #icon: icon,
              #description: description,
            }),
          ),
        ),
      ) as _i9.Future<_i2.LocalFolder>);

  @override
  _i9.Future<void> renameFolder(String? folderId, String? newName) =>
      (super.noSuchMethod(
        Invocation.method(#renameFolder, [folderId, newName]),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> moveFolder(String? folderId, String? newParentId) =>
      (super.noSuchMethod(
        Invocation.method(#moveFolder, [folderId, newParentId]),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> deleteFolder(String? folderId) => (super.noSuchMethod(
        Invocation.method(#deleteFolder, [folderId]),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<List<_i2.LocalNote>> getNotesInFolder(String? folderId) =>
      (super.noSuchMethod(
        Invocation.method(#getNotesInFolder, [folderId]),
        returnValue: _i9.Future<List<_i2.LocalNote>>.value(
          <_i2.LocalNote>[],
        ),
      ) as _i9.Future<List<_i2.LocalNote>>);

  @override
  _i9.Future<List<_i2.LocalNote>> getUnfiledNotes() => (super.noSuchMethod(
        Invocation.method(#getUnfiledNotes, []),
        returnValue: _i9.Future<List<_i2.LocalNote>>.value(
          <_i2.LocalNote>[],
        ),
      ) as _i9.Future<List<_i2.LocalNote>>);

  @override
  _i9.Future<void> addNoteToFolder(String? noteId, String? folderId) =>
      (super.noSuchMethod(
        Invocation.method(#addNoteToFolder, [noteId, folderId]),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> moveNoteToFolder(String? noteId, String? folderId) =>
      (super.noSuchMethod(
        Invocation.method(#moveNoteToFolder, [noteId, folderId]),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> removeNoteFromFolder(String? noteId) => (super.noSuchMethod(
        Invocation.method(#removeNoteFromFolder, [noteId]),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<Map<String, int>> getFolderNoteCounts() => (super.noSuchMethod(
        Invocation.method(#getFolderNoteCounts, []),
        returnValue: _i9.Future<Map<String, int>>.value(<String, int>{}),
      ) as _i9.Future<Map<String, int>>);

  @override
  _i9.Future<void> ensureFolderIntegrity() => (super.noSuchMethod(
        Invocation.method(#ensureFolderIntegrity, []),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<_i2.LocalFolder?> getFolderForNote(String? noteId) =>
      (super.noSuchMethod(
        Invocation.method(#getFolderForNote, [noteId]),
        returnValue: _i9.Future<_i2.LocalFolder?>.value(),
      ) as _i9.Future<_i2.LocalFolder?>);

  @override
  _i9.Future<Map<String, dynamic>> performFolderHealthCheck() =>
      (super.noSuchMethod(
        Invocation.method(#performFolderHealthCheck, []),
        returnValue: _i9.Future<Map<String, dynamic>>.value(
          <String, dynamic>{},
        ),
      ) as _i9.Future<Map<String, dynamic>>);

  @override
  _i9.Future<void> validateAndRepairFolderStructure() => (super.noSuchMethod(
        Invocation.method(#validateAndRepairFolderStructure, []),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> cleanupOrphanedRelationships() => (super.noSuchMethod(
        Invocation.method(#cleanupOrphanedRelationships, []),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> resolveFolderConflicts() => (super.noSuchMethod(
        Invocation.method(#resolveFolderConflicts, []),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<List<_i2.LocalFolder>> getChildFolders(String? parentId) =>
      (super.noSuchMethod(
        Invocation.method(#getChildFolders, [parentId]),
        returnValue: _i9.Future<List<_i2.LocalFolder>>.value(
          <_i2.LocalFolder>[],
        ),
      ) as _i9.Future<List<_i2.LocalFolder>>);

  @override
  _i9.Future<List<_i2.LocalNote>> list({int? limit}) => (super.noSuchMethod(
        Invocation.method(#list, [], {#limit: limit}),
        returnValue: _i9.Future<List<_i2.LocalNote>>.value(
          <_i2.LocalNote>[],
        ),
      ) as _i9.Future<List<_i2.LocalNote>>);

  @override
  _i9.Stream<List<_i2.LocalNote>> watchNotes({
    String? folderId,
    List<String>? anyTags,
    List<String>? noneTags,
    bool? pinnedFirst = true,
    _i2.SortSpec? sort,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#watchNotes, [], {
          #folderId: folderId,
          #anyTags: anyTags,
          #noneTags: noneTags,
          #pinnedFirst: pinnedFirst,
          #sort: sort,
        }),
        returnValue: _i9.Stream<List<_i2.LocalNote>>.empty(),
      ) as _i9.Stream<List<_i2.LocalNote>>);

  @override
  _i9.Future<void> pushAllPending() => (super.noSuchMethod(
        Invocation.method(#pushAllPending, []),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> pullSince(DateTime? since) => (super.noSuchMethod(
        Invocation.method(#pullSince, [since]),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<Set<String>> fetchRemoteActiveIds() => (super.noSuchMethod(
        Invocation.method(#fetchRemoteActiveIds, []),
        returnValue: _i9.Future<Set<String>>.value(<String>{}),
      ) as _i9.Future<Set<String>>);

  @override
  _i9.Future<void> reconcileHardDeletes(Set<String>? remoteIds) =>
      (super.noSuchMethod(
        Invocation.method(#reconcileHardDeletes, [remoteIds]),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> reconcile() => (super.noSuchMethod(
        Invocation.method(#reconcile, []),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<DateTime?> getLastSyncTime() => (super.noSuchMethod(
        Invocation.method(#getLastSyncTime, []),
        returnValue: _i9.Future<DateTime?>.value(),
      ) as _i9.Future<DateTime?>);

  @override
  _i9.Future<void> sync() => (super.noSuchMethod(
        Invocation.method(#sync, []),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [AttachmentService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAttachmentService extends _i1.Mock implements _i11.AttachmentService {
  MockAttachmentService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i12.AttachmentBlockData?> pickAndUpload() => (super.noSuchMethod(
        Invocation.method(#pickAndUpload, []),
        returnValue: _i9.Future<_i12.AttachmentBlockData?>.value(),
      ) as _i9.Future<_i12.AttachmentBlockData?>);

  @override
  _i9.Future<_i12.AttachmentBlockData?> uploadFromBytes({
    required _i13.Uint8List? bytes,
    required String? filename,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#uploadFromBytes, [], {
          #bytes: bytes,
          #filename: filename,
        }),
        returnValue: _i9.Future<_i12.AttachmentBlockData?>.value(),
      ) as _i9.Future<_i12.AttachmentBlockData?>);

  @override
  _i9.Future<_i13.Uint8List?> download(String? url) => (super.noSuchMethod(
        Invocation.method(#download, [url]),
        returnValue: _i9.Future<_i13.Uint8List?>.value(),
      ) as _i9.Future<_i13.Uint8List?>);

  @override
  _i9.Future<bool> delete(String? url) => (super.noSuchMethod(
        Invocation.method(#delete, [url]),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  bool isSupported(String? mimeType) => (super.noSuchMethod(
        Invocation.method(#isSupported, [mimeType]),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [IncomingMailFolderManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockIncomingMailFolderManager extends _i1.Mock
    implements _i14.IncomingMailFolderManager {
  MockIncomingMailFolderManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<String> ensureIncomingMailFolderId() => (super.noSuchMethod(
        Invocation.method(#ensureIncomingMailFolderId, []),
        returnValue: _i9.Future<String>.value(
          _i10.dummyValue<String>(
            this,
            Invocation.method(#ensureIncomingMailFolderId, []),
          ),
        ),
      ) as _i9.Future<String>);

  @override
  _i9.Future<void> addNoteToIncomingMail(String? noteId) => (super.noSuchMethod(
        Invocation.method(#addNoteToIncomingMail, [noteId]),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> processPendingAssignments() => (super.noSuchMethod(
        Invocation.method(#processPendingAssignments, []),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> clearCache() => (super.noSuchMethod(
        Invocation.method(#clearCache, []),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [AnalyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalyticsService extends _i1.Mock implements _i15.AnalyticsService {
  MockAnalyticsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isEnabled =>
      (super.noSuchMethod(Invocation.getter(#isEnabled), returnValue: false)
          as bool);

  @override
  void startTiming(String? eventName) => super.noSuchMethod(
        Invocation.method(#startTiming, [eventName]),
        returnValueForMissingStub: null,
      );

  @override
  void endTiming(String? eventName, {Map<String, dynamic>? properties}) =>
      super.noSuchMethod(
        Invocation.method(#endTiming, [eventName], {#properties: properties}),
        returnValueForMissingStub: null,
      );

  @override
  void featureUsed(String? featureName, {Map<String, dynamic>? properties}) =>
      super.noSuchMethod(
        Invocation.method(
          #featureUsed,
          [featureName],
          {#properties: properties},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void trackError(
    String? message, {
    String? context,
    Map<String, dynamic>? properties,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #trackError,
          [message],
          {#context: context, #properties: properties},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void event(String? name, {Map<String, dynamic>? properties}) =>
      super.noSuchMethod(
        Invocation.method(#event, [name], {#properties: properties}),
        returnValueForMissingStub: null,
      );

  @override
  void enable() => super.noSuchMethod(
        Invocation.method(#enable, []),
        returnValueForMissingStub: null,
      );

  @override
  void disable() => super.noSuchMethod(
        Invocation.method(#disable, []),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AppLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLogger extends _i1.Mock implements _i16.AppLogger {
  MockAppLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void debug(String? message, {Map<String, dynamic>? data}) =>
      super.noSuchMethod(
        Invocation.method(#debug, [message], {#data: data}),
        returnValueForMissingStub: null,
      );

  @override
  void info(String? message, {Map<String, dynamic>? data}) =>
      super.noSuchMethod(
        Invocation.method(#info, [message], {#data: data}),
        returnValueForMissingStub: null,
      );

  @override
  void warning(String? message, {Map<String, dynamic>? data}) =>
      super.noSuchMethod(
        Invocation.method(#warning, [message], {#data: data}),
        returnValueForMissingStub: null,
      );

  @override
  void warn(String? message, {Map<String, dynamic>? data}) =>
      super.noSuchMethod(
        Invocation.method(#warn, [message], {#data: data}),
        returnValueForMissingStub: null,
      );

  @override
  void error(
    String? message, {
    Object? error,
    StackTrace? stackTrace,
    Map<String, dynamic>? data,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [message],
          {#error: error, #stackTrace: stackTrace, #data: data},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void breadcrumb(String? message, {Map<String, dynamic>? data}) =>
      super.noSuchMethod(
        Invocation.method(#breadcrumb, [message], {#data: data}),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<void> flush() => (super.noSuchMethod(
        Invocation.method(#flush, []),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [MethodChannel].
///
/// See the documentation for Mockito's code generation for more information.
class MockMethodChannel extends _i1.Mock implements _i17.MethodChannel {
  MockMethodChannel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  _i6.MethodCodec get codec => (super.noSuchMethod(
        Invocation.getter(#codec),
        returnValue: _FakeMethodCodec_5(this, Invocation.getter(#codec)),
      ) as _i6.MethodCodec);

  @override
  _i7.BinaryMessenger get binaryMessenger => (super.noSuchMethod(
        Invocation.getter(#binaryMessenger),
        returnValue: _FakeBinaryMessenger_6(
          this,
          Invocation.getter(#binaryMessenger),
        ),
      ) as _i7.BinaryMessenger);

  @override
  _i9.Future<T?> invokeMethod<T>(String? method, [dynamic arguments]) =>
      (super.noSuchMethod(
        Invocation.method(#invokeMethod, [method, arguments]),
        returnValue: _i9.Future<T?>.value(),
      ) as _i9.Future<T?>);

  @override
  _i9.Future<List<T>?> invokeListMethod<T>(
    String? method, [
    dynamic arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(#invokeListMethod, [method, arguments]),
        returnValue: _i9.Future<List<T>?>.value(),
      ) as _i9.Future<List<T>?>);

  @override
  _i9.Future<Map<K, V>?> invokeMapMethod<K, V>(
    String? method, [
    dynamic arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(#invokeMapMethod, [method, arguments]),
        returnValue: _i9.Future<Map<K, V>?>.value(),
      ) as _i9.Future<Map<K, V>?>);

  @override
  void setMethodCallHandler(
    _i9.Future<dynamic> Function(_i6.MethodCall)? handler,
  ) =>
      super.noSuchMethod(
        Invocation.method(#setMethodCallHandler, [handler]),
        returnValueForMissingStub: null,
      );
}
