// Mocks generated by Mockito 5.4.6 from annotations
// in duru_notes/test/services/quick_capture_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:typed_data' as _i16;

import 'package:duru_notes/core/monitoring/app_logger.dart' as _i13;
import 'package:duru_notes/domain/entities/note.dart' as _i7;
import 'package:duru_notes/domain/entities/quick_capture_queue_item.dart'
    as _i3;
import 'package:duru_notes/domain/entities/quick_capture_widget_cache.dart'
    as _i11;
import 'package:duru_notes/domain/entities/template.dart' as _i2;
import 'package:duru_notes/domain/repositories/i_notes_repository.dart' as _i5;
import 'package:duru_notes/domain/repositories/i_quick_capture_repository.dart'
    as _i10;
import 'package:duru_notes/domain/repositories/i_template_repository.dart'
    as _i8;
import 'package:duru_notes/models/note_block.dart' as _i15;
import 'package:duru_notes/services/analytics/analytics_service.dart' as _i12;
import 'package:duru_notes/services/attachment_service.dart' as _i14;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;
import 'package:supabase/supabase.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeTemplate_0 extends _i1.SmartFake implements _i2.Template {
  _FakeTemplate_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeQuickCaptureQueueItem_1 extends _i1.SmartFake
    implements _i3.QuickCaptureQueueItem {
  _FakeQuickCaptureQueueItem_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFunctionsClient_2 extends _i1.SmartFake
    implements _i4.FunctionsClient {
  _FakeFunctionsClient_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSupabaseStorageClient_3 extends _i1.SmartFake
    implements _i4.SupabaseStorageClient {
  _FakeSupabaseStorageClient_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRealtimeClient_4 extends _i1.SmartFake
    implements _i4.RealtimeClient {
  _FakeRealtimeClient_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePostgrestClient_5 extends _i1.SmartFake
    implements _i4.PostgrestClient {
  _FakePostgrestClient_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGoTrueClient_6 extends _i1.SmartFake implements _i4.GoTrueClient {
  _FakeGoTrueClient_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSupabaseQueryBuilder_7 extends _i1.SmartFake
    implements _i4.SupabaseQueryBuilder {
  _FakeSupabaseQueryBuilder_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSupabaseQuerySchema_8 extends _i1.SmartFake
    implements _i4.SupabaseQuerySchema {
  _FakeSupabaseQuerySchema_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePostgrestFilterBuilder_9<T1> extends _i1.SmartFake
    implements _i4.PostgrestFilterBuilder<T1> {
  _FakePostgrestFilterBuilder_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRealtimeChannel_10 extends _i1.SmartFake
    implements _i4.RealtimeChannel {
  _FakeRealtimeChannel_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGoTrueAdminApi_11 extends _i1.SmartFake
    implements _i4.GoTrueAdminApi {
  _FakeGoTrueAdminApi_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGoTrueMFAApi_12 extends _i1.SmartFake implements _i4.GoTrueMFAApi {
  _FakeGoTrueMFAApi_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAuthResponse_13 extends _i1.SmartFake implements _i4.AuthResponse {
  _FakeAuthResponse_13(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeOAuthResponse_14 extends _i1.SmartFake implements _i4.OAuthResponse {
  _FakeOAuthResponse_14(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAuthSessionUrlResponse_15 extends _i1.SmartFake
    implements _i4.AuthSessionUrlResponse {
  _FakeAuthSessionUrlResponse_15(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeResendResponse_16 extends _i1.SmartFake
    implements _i4.ResendResponse {
  _FakeResendResponse_16(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUserResponse_17 extends _i1.SmartFake implements _i4.UserResponse {
  _FakeUserResponse_17(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeObject_18 extends _i1.SmartFake implements Object {
  _FakeObject_18(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [INotesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockINotesRepository extends _i1.Mock implements _i5.INotesRepository {
  MockINotesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i7.Note?> getNoteById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getNoteById, [id]),
            returnValue: _i6.Future<_i7.Note?>.value(),
          )
          as _i6.Future<_i7.Note?>);

  @override
  _i6.Future<_i7.Note?> createOrUpdate({
    required String? title,
    required String? body,
    String? id,
    String? folderId,
    List<String>? tags = const [],
    List<Map<String, String?>>? links = const [],
    Map<String, dynamic>? attachmentMeta,
    Map<String, dynamic>? metadataJson,
    bool? isPinned,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createOrUpdate, [], {
              #title: title,
              #body: body,
              #id: id,
              #folderId: folderId,
              #tags: tags,
              #links: links,
              #attachmentMeta: attachmentMeta,
              #metadataJson: metadataJson,
              #isPinned: isPinned,
              #createdAt: createdAt,
              #updatedAt: updatedAt,
            }),
            returnValue: _i6.Future<_i7.Note?>.value(),
          )
          as _i6.Future<_i7.Note?>);

  @override
  _i6.Future<void> updateLocalNote(
    String? id, {
    String? title,
    String? body,
    bool? deleted,
    String? folderId,
    bool? updateFolder = false,
    Map<String, dynamic>? attachmentMeta,
    Map<String, dynamic>? metadata,
    List<Map<String, String?>>? links,
    bool? isPinned,
    DateTime? updatedAt,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #updateLocalNote,
              [id],
              {
                #title: title,
                #body: body,
                #deleted: deleted,
                #folderId: folderId,
                #updateFolder: updateFolder,
                #attachmentMeta: attachmentMeta,
                #metadata: metadata,
                #links: links,
                #isPinned: isPinned,
                #updatedAt: updatedAt,
              },
            ),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> deleteNote(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteNote, [id]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<_i7.Note>> localNotesForSync() =>
      (super.noSuchMethod(
            Invocation.method(#localNotesForSync, []),
            returnValue: _i6.Future<List<_i7.Note>>.value(<_i7.Note>[]),
          )
          as _i6.Future<List<_i7.Note>>);

  @override
  _i6.Future<List<_i7.Note>> localNotes() =>
      (super.noSuchMethod(
            Invocation.method(#localNotes, []),
            returnValue: _i6.Future<List<_i7.Note>>.value(<_i7.Note>[]),
          )
          as _i6.Future<List<_i7.Note>>);

  @override
  _i6.Future<List<_i7.Note>> getRecentlyViewedNotes({int? limit = 5}) =>
      (super.noSuchMethod(
            Invocation.method(#getRecentlyViewedNotes, [], {#limit: limit}),
            returnValue: _i6.Future<List<_i7.Note>>.value(<_i7.Note>[]),
          )
          as _i6.Future<List<_i7.Note>>);

  @override
  _i6.Future<List<_i7.Note>> listAfter(DateTime? cursor, {int? limit = 20}) =>
      (super.noSuchMethod(
            Invocation.method(#listAfter, [cursor], {#limit: limit}),
            returnValue: _i6.Future<List<_i7.Note>>.value(<_i7.Note>[]),
          )
          as _i6.Future<List<_i7.Note>>);

  @override
  _i6.Future<void> toggleNotePin(String? noteId) =>
      (super.noSuchMethod(
            Invocation.method(#toggleNotePin, [noteId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> setNotePin(String? noteId, bool? isPinned) =>
      (super.noSuchMethod(
            Invocation.method(#setNotePin, [noteId, isPinned]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<_i7.Note>> getPinnedNotes() =>
      (super.noSuchMethod(
            Invocation.method(#getPinnedNotes, []),
            returnValue: _i6.Future<List<_i7.Note>>.value(<_i7.Note>[]),
          )
          as _i6.Future<List<_i7.Note>>);

  @override
  _i6.Stream<List<_i7.Note>> watchNotes({
    String? folderId,
    List<String>? anyTags,
    List<String>? noneTags,
    bool? pinnedFirst = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#watchNotes, [], {
              #folderId: folderId,
              #anyTags: anyTags,
              #noneTags: noneTags,
              #pinnedFirst: pinnedFirst,
            }),
            returnValue: _i6.Stream<List<_i7.Note>>.empty(),
          )
          as _i6.Stream<List<_i7.Note>>);

  @override
  _i6.Future<List<_i7.Note>> list({int? limit}) =>
      (super.noSuchMethod(
            Invocation.method(#list, [], {#limit: limit}),
            returnValue: _i6.Future<List<_i7.Note>>.value(<_i7.Note>[]),
          )
          as _i6.Future<List<_i7.Note>>);

  @override
  _i6.Future<int> getNotesCountInFolder(String? folderId) =>
      (super.noSuchMethod(
            Invocation.method(#getNotesCountInFolder, [folderId]),
            returnValue: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);

  @override
  _i6.Future<List<String>> getNoteIdsInFolder(String? folderId) =>
      (super.noSuchMethod(
            Invocation.method(#getNoteIdsInFolder, [folderId]),
            returnValue: _i6.Future<List<String>>.value(<String>[]),
          )
          as _i6.Future<List<String>>);

  @override
  _i6.Future<void> sync() =>
      (super.noSuchMethod(
            Invocation.method(#sync, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> pushAllPending() =>
      (super.noSuchMethod(
            Invocation.method(#pushAllPending, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> pullSince(DateTime? since) =>
      (super.noSuchMethod(
            Invocation.method(#pullSince, [since]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<DateTime?> getLastSyncTime() =>
      (super.noSuchMethod(
            Invocation.method(#getLastSyncTime, []),
            returnValue: _i6.Future<DateTime?>.value(),
          )
          as _i6.Future<DateTime?>);
}

/// A class which mocks [ITemplateRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockITemplateRepository extends _i1.Mock
    implements _i8.ITemplateRepository {
  MockITemplateRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i2.Template>> getAllTemplates() =>
      (super.noSuchMethod(
            Invocation.method(#getAllTemplates, []),
            returnValue: _i6.Future<List<_i2.Template>>.value(<_i2.Template>[]),
          )
          as _i6.Future<List<_i2.Template>>);

  @override
  _i6.Future<List<_i2.Template>> getSystemTemplates() =>
      (super.noSuchMethod(
            Invocation.method(#getSystemTemplates, []),
            returnValue: _i6.Future<List<_i2.Template>>.value(<_i2.Template>[]),
          )
          as _i6.Future<List<_i2.Template>>);

  @override
  _i6.Future<List<_i2.Template>> getUserTemplates() =>
      (super.noSuchMethod(
            Invocation.method(#getUserTemplates, []),
            returnValue: _i6.Future<List<_i2.Template>>.value(<_i2.Template>[]),
          )
          as _i6.Future<List<_i2.Template>>);

  @override
  _i6.Future<_i2.Template?> getTemplateById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getTemplateById, [id]),
            returnValue: _i6.Future<_i2.Template?>.value(),
          )
          as _i6.Future<_i2.Template?>);

  @override
  _i6.Future<_i2.Template> createTemplate(_i2.Template? template) =>
      (super.noSuchMethod(
            Invocation.method(#createTemplate, [template]),
            returnValue: _i6.Future<_i2.Template>.value(
              _FakeTemplate_0(
                this,
                Invocation.method(#createTemplate, [template]),
              ),
            ),
          )
          as _i6.Future<_i2.Template>);

  @override
  _i6.Future<_i2.Template> updateTemplate(_i2.Template? template) =>
      (super.noSuchMethod(
            Invocation.method(#updateTemplate, [template]),
            returnValue: _i6.Future<_i2.Template>.value(
              _FakeTemplate_0(
                this,
                Invocation.method(#updateTemplate, [template]),
              ),
            ),
          )
          as _i6.Future<_i2.Template>);

  @override
  _i6.Future<void> deleteTemplate(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTemplate, [id]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Stream<List<_i2.Template>> watchTemplates() =>
      (super.noSuchMethod(
            Invocation.method(#watchTemplates, []),
            returnValue: _i6.Stream<List<_i2.Template>>.empty(),
          )
          as _i6.Stream<List<_i2.Template>>);

  @override
  _i6.Future<String> applyTemplate({
    required String? templateId,
    required Map<String, dynamic>? variableValues,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#applyTemplate, [], {
              #templateId: templateId,
              #variableValues: variableValues,
            }),
            returnValue: _i6.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(#applyTemplate, [], {
                  #templateId: templateId,
                  #variableValues: variableValues,
                }),
              ),
            ),
          )
          as _i6.Future<String>);

  @override
  _i6.Future<_i2.Template> duplicateTemplate({
    required String? templateId,
    required String? newName,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#duplicateTemplate, [], {
              #templateId: templateId,
              #newName: newName,
            }),
            returnValue: _i6.Future<_i2.Template>.value(
              _FakeTemplate_0(
                this,
                Invocation.method(#duplicateTemplate, [], {
                  #templateId: templateId,
                  #newName: newName,
                }),
              ),
            ),
          )
          as _i6.Future<_i2.Template>);
}

/// A class which mocks [IQuickCaptureRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIQuickCaptureRepository extends _i1.Mock
    implements _i10.IQuickCaptureRepository {
  MockIQuickCaptureRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.QuickCaptureQueueItem> enqueueCapture({
    required String? userId,
    required Map<String, dynamic>? payload,
    String? platform,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#enqueueCapture, [], {
              #userId: userId,
              #payload: payload,
              #platform: platform,
            }),
            returnValue: _i6.Future<_i3.QuickCaptureQueueItem>.value(
              _FakeQuickCaptureQueueItem_1(
                this,
                Invocation.method(#enqueueCapture, [], {
                  #userId: userId,
                  #payload: payload,
                  #platform: platform,
                }),
              ),
            ),
          )
          as _i6.Future<_i3.QuickCaptureQueueItem>);

  @override
  _i6.Future<List<_i3.QuickCaptureQueueItem>> getPendingCaptures({
    required String? userId,
    int? limit,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getPendingCaptures, [], {
              #userId: userId,
              #limit: limit,
            }),
            returnValue: _i6.Future<List<_i3.QuickCaptureQueueItem>>.value(
              <_i3.QuickCaptureQueueItem>[],
            ),
          )
          as _i6.Future<List<_i3.QuickCaptureQueueItem>>);

  @override
  _i6.Future<void> markCaptureProcessed({
    required String? id,
    bool? processed,
    DateTime? processedAt,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#markCaptureProcessed, [], {
              #id: id,
              #processed: processed,
              #processedAt: processedAt,
            }),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> incrementRetryCount(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#incrementRetryCount, [id]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> deleteCapture(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteCapture, [id]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> clearProcessedCaptures({
    required String? userId,
    DateTime? olderThan,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#clearProcessedCaptures, [], {
              #userId: userId,
              #olderThan: olderThan,
            }),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<_i11.QuickCaptureWidgetCache?> getWidgetCache(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getWidgetCache, [userId]),
            returnValue: _i6.Future<_i11.QuickCaptureWidgetCache?>.value(),
          )
          as _i6.Future<_i11.QuickCaptureWidgetCache?>);

  @override
  _i6.Future<void> upsertWidgetCache(_i11.QuickCaptureWidgetCache? cache) =>
      (super.noSuchMethod(
            Invocation.method(#upsertWidgetCache, [cache]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}

/// A class which mocks [AnalyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalyticsService extends _i1.Mock implements _i12.AnalyticsService {
  MockAnalyticsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isEnabled =>
      (super.noSuchMethod(Invocation.getter(#isEnabled), returnValue: false)
          as bool);

  @override
  void startTiming(String? eventName) => super.noSuchMethod(
    Invocation.method(#startTiming, [eventName]),
    returnValueForMissingStub: null,
  );

  @override
  void endTiming(String? eventName, {Map<String, dynamic>? properties}) =>
      super.noSuchMethod(
        Invocation.method(#endTiming, [eventName], {#properties: properties}),
        returnValueForMissingStub: null,
      );

  @override
  void featureUsed(String? featureName, {Map<String, dynamic>? properties}) =>
      super.noSuchMethod(
        Invocation.method(
          #featureUsed,
          [featureName],
          {#properties: properties},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void trackError(
    String? message, {
    String? context,
    Map<String, dynamic>? properties,
  }) => super.noSuchMethod(
    Invocation.method(
      #trackError,
      [message],
      {#context: context, #properties: properties},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void event(String? name, {Map<String, dynamic>? properties}) =>
      super.noSuchMethod(
        Invocation.method(#event, [name], {#properties: properties}),
        returnValueForMissingStub: null,
      );

  @override
  void enable() => super.noSuchMethod(
    Invocation.method(#enable, []),
    returnValueForMissingStub: null,
  );

  @override
  void disable() => super.noSuchMethod(
    Invocation.method(#disable, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AppLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLogger extends _i1.Mock implements _i13.AppLogger {
  MockAppLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void debug(String? message, {Map<String, dynamic>? data}) =>
      super.noSuchMethod(
        Invocation.method(#debug, [message], {#data: data}),
        returnValueForMissingStub: null,
      );

  @override
  void info(String? message, {Map<String, dynamic>? data}) =>
      super.noSuchMethod(
        Invocation.method(#info, [message], {#data: data}),
        returnValueForMissingStub: null,
      );

  @override
  void warning(String? message, {Map<String, dynamic>? data}) =>
      super.noSuchMethod(
        Invocation.method(#warning, [message], {#data: data}),
        returnValueForMissingStub: null,
      );

  @override
  void warn(String? message, {Map<String, dynamic>? data}) =>
      super.noSuchMethod(
        Invocation.method(#warn, [message], {#data: data}),
        returnValueForMissingStub: null,
      );

  @override
  void error(
    String? message, {
    Object? error,
    StackTrace? stackTrace,
    Map<String, dynamic>? data,
  }) => super.noSuchMethod(
    Invocation.method(
      #error,
      [message],
      {#error: error, #stackTrace: stackTrace, #data: data},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void breadcrumb(String? message, {Map<String, dynamic>? data}) =>
      super.noSuchMethod(
        Invocation.method(#breadcrumb, [message], {#data: data}),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> flush() =>
      (super.noSuchMethod(
            Invocation.method(#flush, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}

/// A class which mocks [SupabaseClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupabaseClient extends _i1.Mock implements _i4.SupabaseClient {
  MockSupabaseClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.FunctionsClient get functions =>
      (super.noSuchMethod(
            Invocation.getter(#functions),
            returnValue: _FakeFunctionsClient_2(
              this,
              Invocation.getter(#functions),
            ),
          )
          as _i4.FunctionsClient);

  @override
  _i4.SupabaseStorageClient get storage =>
      (super.noSuchMethod(
            Invocation.getter(#storage),
            returnValue: _FakeSupabaseStorageClient_3(
              this,
              Invocation.getter(#storage),
            ),
          )
          as _i4.SupabaseStorageClient);

  @override
  _i4.RealtimeClient get realtime =>
      (super.noSuchMethod(
            Invocation.getter(#realtime),
            returnValue: _FakeRealtimeClient_4(
              this,
              Invocation.getter(#realtime),
            ),
          )
          as _i4.RealtimeClient);

  @override
  _i4.PostgrestClient get rest =>
      (super.noSuchMethod(
            Invocation.getter(#rest),
            returnValue: _FakePostgrestClient_5(this, Invocation.getter(#rest)),
          )
          as _i4.PostgrestClient);

  @override
  Map<String, String> get headers =>
      (super.noSuchMethod(
            Invocation.getter(#headers),
            returnValue: <String, String>{},
          )
          as Map<String, String>);

  @override
  _i4.GoTrueClient get auth =>
      (super.noSuchMethod(
            Invocation.getter(#auth),
            returnValue: _FakeGoTrueClient_6(this, Invocation.getter(#auth)),
          )
          as _i4.GoTrueClient);

  @override
  set functions(_i4.FunctionsClient? value) => super.noSuchMethod(
    Invocation.setter(#functions, value),
    returnValueForMissingStub: null,
  );

  @override
  set storage(_i4.SupabaseStorageClient? value) => super.noSuchMethod(
    Invocation.setter(#storage, value),
    returnValueForMissingStub: null,
  );

  @override
  set realtime(_i4.RealtimeClient? value) => super.noSuchMethod(
    Invocation.setter(#realtime, value),
    returnValueForMissingStub: null,
  );

  @override
  set rest(_i4.PostgrestClient? value) => super.noSuchMethod(
    Invocation.setter(#rest, value),
    returnValueForMissingStub: null,
  );

  @override
  set headers(Map<String, String>? headers) => super.noSuchMethod(
    Invocation.setter(#headers, headers),
    returnValueForMissingStub: null,
  );

  @override
  _i4.SupabaseQueryBuilder from(String? table) =>
      (super.noSuchMethod(
            Invocation.method(#from, [table]),
            returnValue: _FakeSupabaseQueryBuilder_7(
              this,
              Invocation.method(#from, [table]),
            ),
          )
          as _i4.SupabaseQueryBuilder);

  @override
  _i4.SupabaseQuerySchema schema(String? schema) =>
      (super.noSuchMethod(
            Invocation.method(#schema, [schema]),
            returnValue: _FakeSupabaseQuerySchema_8(
              this,
              Invocation.method(#schema, [schema]),
            ),
          )
          as _i4.SupabaseQuerySchema);

  @override
  _i4.PostgrestFilterBuilder<T> rpc<T>(
    String? fn, {
    Map<String, dynamic>? params,
    dynamic get = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#rpc, [fn], {#params: params, #get: get}),
            returnValue: _FakePostgrestFilterBuilder_9<T>(
              this,
              Invocation.method(#rpc, [fn], {#params: params, #get: get}),
            ),
          )
          as _i4.PostgrestFilterBuilder<T>);

  @override
  _i4.RealtimeChannel channel(
    String? name, {
    _i4.RealtimeChannelConfig? opts = const _i4.RealtimeChannelConfig(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#channel, [name], {#opts: opts}),
            returnValue: _FakeRealtimeChannel_10(
              this,
              Invocation.method(#channel, [name], {#opts: opts}),
            ),
          )
          as _i4.RealtimeChannel);

  @override
  List<_i4.RealtimeChannel> getChannels() =>
      (super.noSuchMethod(
            Invocation.method(#getChannels, []),
            returnValue: <_i4.RealtimeChannel>[],
          )
          as List<_i4.RealtimeChannel>);

  @override
  _i6.Future<String> removeChannel(_i4.RealtimeChannel? channel) =>
      (super.noSuchMethod(
            Invocation.method(#removeChannel, [channel]),
            returnValue: _i6.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(#removeChannel, [channel]),
              ),
            ),
          )
          as _i6.Future<String>);

  @override
  _i6.Future<List<String>> removeAllChannels() =>
      (super.noSuchMethod(
            Invocation.method(#removeAllChannels, []),
            returnValue: _i6.Future<List<String>>.value(<String>[]),
          )
          as _i6.Future<List<String>>);

  @override
  _i6.Future<void> dispose() =>
      (super.noSuchMethod(
            Invocation.method(#dispose, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}

/// A class which mocks [GoTrueClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoTrueClient extends _i1.Mock implements _i4.GoTrueClient {
  MockGoTrueClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.GoTrueAdminApi get admin =>
      (super.noSuchMethod(
            Invocation.getter(#admin),
            returnValue: _FakeGoTrueAdminApi_11(
              this,
              Invocation.getter(#admin),
            ),
          )
          as _i4.GoTrueAdminApi);

  @override
  _i4.GoTrueMFAApi get mfa =>
      (super.noSuchMethod(
            Invocation.getter(#mfa),
            returnValue: _FakeGoTrueMFAApi_12(this, Invocation.getter(#mfa)),
          )
          as _i4.GoTrueMFAApi);

  @override
  _i6.Stream<_i4.AuthState> get onAuthStateChange =>
      (super.noSuchMethod(
            Invocation.getter(#onAuthStateChange),
            returnValue: _i6.Stream<_i4.AuthState>.empty(),
          )
          as _i6.Stream<_i4.AuthState>);

  @override
  _i6.Stream<_i4.AuthState> get onAuthStateChangeSync =>
      (super.noSuchMethod(
            Invocation.getter(#onAuthStateChangeSync),
            returnValue: _i6.Stream<_i4.AuthState>.empty(),
          )
          as _i6.Stream<_i4.AuthState>);

  @override
  Map<String, String> get headers =>
      (super.noSuchMethod(
            Invocation.getter(#headers),
            returnValue: <String, String>{},
          )
          as Map<String, String>);

  @override
  set admin(_i4.GoTrueAdminApi? value) => super.noSuchMethod(
    Invocation.setter(#admin, value),
    returnValueForMissingStub: null,
  );

  @override
  set mfa(_i4.GoTrueMFAApi? value) => super.noSuchMethod(
    Invocation.setter(#mfa, value),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<_i4.AuthResponse> signInAnonymously({
    Map<String, dynamic>? data,
    String? captchaToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signInAnonymously, [], {
              #data: data,
              #captchaToken: captchaToken,
            }),
            returnValue: _i6.Future<_i4.AuthResponse>.value(
              _FakeAuthResponse_13(
                this,
                Invocation.method(#signInAnonymously, [], {
                  #data: data,
                  #captchaToken: captchaToken,
                }),
              ),
            ),
          )
          as _i6.Future<_i4.AuthResponse>);

  @override
  _i6.Future<_i4.AuthResponse> signUp({
    String? email,
    String? phone,
    required String? password,
    String? emailRedirectTo,
    Map<String, dynamic>? data,
    String? captchaToken,
    _i4.OtpChannel? channel = _i4.OtpChannel.sms,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signUp, [], {
              #email: email,
              #phone: phone,
              #password: password,
              #emailRedirectTo: emailRedirectTo,
              #data: data,
              #captchaToken: captchaToken,
              #channel: channel,
            }),
            returnValue: _i6.Future<_i4.AuthResponse>.value(
              _FakeAuthResponse_13(
                this,
                Invocation.method(#signUp, [], {
                  #email: email,
                  #phone: phone,
                  #password: password,
                  #emailRedirectTo: emailRedirectTo,
                  #data: data,
                  #captchaToken: captchaToken,
                  #channel: channel,
                }),
              ),
            ),
          )
          as _i6.Future<_i4.AuthResponse>);

  @override
  _i6.Future<_i4.AuthResponse> signInWithPassword({
    String? email,
    String? phone,
    required String? password,
    String? captchaToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithPassword, [], {
              #email: email,
              #phone: phone,
              #password: password,
              #captchaToken: captchaToken,
            }),
            returnValue: _i6.Future<_i4.AuthResponse>.value(
              _FakeAuthResponse_13(
                this,
                Invocation.method(#signInWithPassword, [], {
                  #email: email,
                  #phone: phone,
                  #password: password,
                  #captchaToken: captchaToken,
                }),
              ),
            ),
          )
          as _i6.Future<_i4.AuthResponse>);

  @override
  _i6.Future<_i4.OAuthResponse> getOAuthSignInUrl({
    required _i4.OAuthProvider? provider,
    String? redirectTo,
    String? scopes,
    Map<String, String>? queryParams,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getOAuthSignInUrl, [], {
              #provider: provider,
              #redirectTo: redirectTo,
              #scopes: scopes,
              #queryParams: queryParams,
            }),
            returnValue: _i6.Future<_i4.OAuthResponse>.value(
              _FakeOAuthResponse_14(
                this,
                Invocation.method(#getOAuthSignInUrl, [], {
                  #provider: provider,
                  #redirectTo: redirectTo,
                  #scopes: scopes,
                  #queryParams: queryParams,
                }),
              ),
            ),
          )
          as _i6.Future<_i4.OAuthResponse>);

  @override
  _i6.Future<_i4.AuthSessionUrlResponse> exchangeCodeForSession(
    String? authCode,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#exchangeCodeForSession, [authCode]),
            returnValue: _i6.Future<_i4.AuthSessionUrlResponse>.value(
              _FakeAuthSessionUrlResponse_15(
                this,
                Invocation.method(#exchangeCodeForSession, [authCode]),
              ),
            ),
          )
          as _i6.Future<_i4.AuthSessionUrlResponse>);

  @override
  _i6.Future<_i4.AuthResponse> signInWithIdToken({
    required _i4.OAuthProvider? provider,
    required String? idToken,
    String? accessToken,
    String? nonce,
    String? captchaToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithIdToken, [], {
              #provider: provider,
              #idToken: idToken,
              #accessToken: accessToken,
              #nonce: nonce,
              #captchaToken: captchaToken,
            }),
            returnValue: _i6.Future<_i4.AuthResponse>.value(
              _FakeAuthResponse_13(
                this,
                Invocation.method(#signInWithIdToken, [], {
                  #provider: provider,
                  #idToken: idToken,
                  #accessToken: accessToken,
                  #nonce: nonce,
                  #captchaToken: captchaToken,
                }),
              ),
            ),
          )
          as _i6.Future<_i4.AuthResponse>);

  @override
  _i6.Future<void> signInWithOtp({
    String? email,
    String? phone,
    String? emailRedirectTo,
    bool? shouldCreateUser,
    Map<String, dynamic>? data,
    String? captchaToken,
    _i4.OtpChannel? channel = _i4.OtpChannel.sms,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithOtp, [], {
              #email: email,
              #phone: phone,
              #emailRedirectTo: emailRedirectTo,
              #shouldCreateUser: shouldCreateUser,
              #data: data,
              #captchaToken: captchaToken,
              #channel: channel,
            }),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<_i4.AuthResponse> verifyOTP({
    String? email,
    String? phone,
    String? token,
    required _i4.OtpType? type,
    String? redirectTo,
    String? captchaToken,
    String? tokenHash,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#verifyOTP, [], {
              #email: email,
              #phone: phone,
              #token: token,
              #type: type,
              #redirectTo: redirectTo,
              #captchaToken: captchaToken,
              #tokenHash: tokenHash,
            }),
            returnValue: _i6.Future<_i4.AuthResponse>.value(
              _FakeAuthResponse_13(
                this,
                Invocation.method(#verifyOTP, [], {
                  #email: email,
                  #phone: phone,
                  #token: token,
                  #type: type,
                  #redirectTo: redirectTo,
                  #captchaToken: captchaToken,
                  #tokenHash: tokenHash,
                }),
              ),
            ),
          )
          as _i6.Future<_i4.AuthResponse>);

  @override
  _i6.Future<String> getSSOSignInUrl({
    String? providerId,
    String? domain,
    String? redirectTo,
    String? captchaToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getSSOSignInUrl, [], {
              #providerId: providerId,
              #domain: domain,
              #redirectTo: redirectTo,
              #captchaToken: captchaToken,
            }),
            returnValue: _i6.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(#getSSOSignInUrl, [], {
                  #providerId: providerId,
                  #domain: domain,
                  #redirectTo: redirectTo,
                  #captchaToken: captchaToken,
                }),
              ),
            ),
          )
          as _i6.Future<String>);

  @override
  _i6.Future<_i4.AuthResponse> refreshSession([String? refreshToken]) =>
      (super.noSuchMethod(
            Invocation.method(#refreshSession, [refreshToken]),
            returnValue: _i6.Future<_i4.AuthResponse>.value(
              _FakeAuthResponse_13(
                this,
                Invocation.method(#refreshSession, [refreshToken]),
              ),
            ),
          )
          as _i6.Future<_i4.AuthResponse>);

  @override
  _i6.Future<void> reauthenticate() =>
      (super.noSuchMethod(
            Invocation.method(#reauthenticate, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<_i4.ResendResponse> resend({
    String? email,
    String? phone,
    required _i4.OtpType? type,
    String? emailRedirectTo,
    String? captchaToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#resend, [], {
              #email: email,
              #phone: phone,
              #type: type,
              #emailRedirectTo: emailRedirectTo,
              #captchaToken: captchaToken,
            }),
            returnValue: _i6.Future<_i4.ResendResponse>.value(
              _FakeResendResponse_16(
                this,
                Invocation.method(#resend, [], {
                  #email: email,
                  #phone: phone,
                  #type: type,
                  #emailRedirectTo: emailRedirectTo,
                  #captchaToken: captchaToken,
                }),
              ),
            ),
          )
          as _i6.Future<_i4.ResendResponse>);

  @override
  _i6.Future<_i4.UserResponse> getUser([String? jwt]) =>
      (super.noSuchMethod(
            Invocation.method(#getUser, [jwt]),
            returnValue: _i6.Future<_i4.UserResponse>.value(
              _FakeUserResponse_17(this, Invocation.method(#getUser, [jwt])),
            ),
          )
          as _i6.Future<_i4.UserResponse>);

  @override
  _i6.Future<_i4.UserResponse> updateUser(
    _i4.UserAttributes? attributes, {
    String? emailRedirectTo,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #updateUser,
              [attributes],
              {#emailRedirectTo: emailRedirectTo},
            ),
            returnValue: _i6.Future<_i4.UserResponse>.value(
              _FakeUserResponse_17(
                this,
                Invocation.method(
                  #updateUser,
                  [attributes],
                  {#emailRedirectTo: emailRedirectTo},
                ),
              ),
            ),
          )
          as _i6.Future<_i4.UserResponse>);

  @override
  _i6.Future<_i4.AuthResponse> setSession(String? refreshToken) =>
      (super.noSuchMethod(
            Invocation.method(#setSession, [refreshToken]),
            returnValue: _i6.Future<_i4.AuthResponse>.value(
              _FakeAuthResponse_13(
                this,
                Invocation.method(#setSession, [refreshToken]),
              ),
            ),
          )
          as _i6.Future<_i4.AuthResponse>);

  @override
  _i6.Future<_i4.AuthSessionUrlResponse> getSessionFromUrl(
    Uri? originUrl, {
    bool? storeSession = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getSessionFromUrl,
              [originUrl],
              {#storeSession: storeSession},
            ),
            returnValue: _i6.Future<_i4.AuthSessionUrlResponse>.value(
              _FakeAuthSessionUrlResponse_15(
                this,
                Invocation.method(
                  #getSessionFromUrl,
                  [originUrl],
                  {#storeSession: storeSession},
                ),
              ),
            ),
          )
          as _i6.Future<_i4.AuthSessionUrlResponse>);

  @override
  _i6.Future<void> signOut({
    _i4.SignOutScope? scope = _i4.SignOutScope.local,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signOut, [], {#scope: scope}),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> resetPasswordForEmail(
    String? email, {
    String? redirectTo,
    String? captchaToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #resetPasswordForEmail,
              [email],
              {#redirectTo: redirectTo, #captchaToken: captchaToken},
            ),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<_i4.UserIdentity>> getUserIdentities() =>
      (super.noSuchMethod(
            Invocation.method(#getUserIdentities, []),
            returnValue: _i6.Future<List<_i4.UserIdentity>>.value(
              <_i4.UserIdentity>[],
            ),
          )
          as _i6.Future<List<_i4.UserIdentity>>);

  @override
  _i6.Future<_i4.AuthResponse> linkIdentityWithIdToken({
    required _i4.OAuthProvider? provider,
    required String? idToken,
    String? accessToken,
    String? nonce,
    String? captchaToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#linkIdentityWithIdToken, [], {
              #provider: provider,
              #idToken: idToken,
              #accessToken: accessToken,
              #nonce: nonce,
              #captchaToken: captchaToken,
            }),
            returnValue: _i6.Future<_i4.AuthResponse>.value(
              _FakeAuthResponse_13(
                this,
                Invocation.method(#linkIdentityWithIdToken, [], {
                  #provider: provider,
                  #idToken: idToken,
                  #accessToken: accessToken,
                  #nonce: nonce,
                  #captchaToken: captchaToken,
                }),
              ),
            ),
          )
          as _i6.Future<_i4.AuthResponse>);

  @override
  _i6.Future<_i4.OAuthResponse> getLinkIdentityUrl(
    _i4.OAuthProvider? provider, {
    String? redirectTo,
    String? scopes,
    Map<String, String>? queryParams,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getLinkIdentityUrl,
              [provider],
              {
                #redirectTo: redirectTo,
                #scopes: scopes,
                #queryParams: queryParams,
              },
            ),
            returnValue: _i6.Future<_i4.OAuthResponse>.value(
              _FakeOAuthResponse_14(
                this,
                Invocation.method(
                  #getLinkIdentityUrl,
                  [provider],
                  {
                    #redirectTo: redirectTo,
                    #scopes: scopes,
                    #queryParams: queryParams,
                  },
                ),
              ),
            ),
          )
          as _i6.Future<_i4.OAuthResponse>);

  @override
  _i6.Future<void> unlinkIdentity(_i4.UserIdentity? identity) =>
      (super.noSuchMethod(
            Invocation.method(#unlinkIdentity, [identity]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> setInitialSession(String? jsonStr) =>
      (super.noSuchMethod(
            Invocation.method(#setInitialSession, [jsonStr]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<_i4.AuthResponse> recoverSession(String? jsonStr) =>
      (super.noSuchMethod(
            Invocation.method(#recoverSession, [jsonStr]),
            returnValue: _i6.Future<_i4.AuthResponse>.value(
              _FakeAuthResponse_13(
                this,
                Invocation.method(#recoverSession, [jsonStr]),
              ),
            ),
          )
          as _i6.Future<_i4.AuthResponse>);

  @override
  void startAutoRefresh() => super.noSuchMethod(
    Invocation.method(#startAutoRefresh, []),
    returnValueForMissingStub: null,
  );

  @override
  void stopAutoRefresh() => super.noSuchMethod(
    Invocation.method(#stopAutoRefresh, []),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyAllSubscribers(
    _i4.AuthChangeEvent? event, {
    _i4.Session? session,
    bool? broadcast = true,
  }) => super.noSuchMethod(
    Invocation.method(
      #notifyAllSubscribers,
      [event],
      {#session: session, #broadcast: broadcast},
    ),
    returnValueForMissingStub: null,
  );

  @override
  Object notifyException(Object? exception, [StackTrace? stackTrace]) =>
      (super.noSuchMethod(
            Invocation.method(#notifyException, [exception, stackTrace]),
            returnValue: _FakeObject_18(
              this,
              Invocation.method(#notifyException, [exception, stackTrace]),
            ),
          )
          as Object);
}

/// A class which mocks [User].
///
/// See the documentation for Mockito's code generation for more information.
class MockUser extends _i1.Mock implements _i4.User {
  MockUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i9.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  Map<String, dynamic> get appMetadata =>
      (super.noSuchMethod(
            Invocation.getter(#appMetadata),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  String get aud =>
      (super.noSuchMethod(
            Invocation.getter(#aud),
            returnValue: _i9.dummyValue<String>(this, Invocation.getter(#aud)),
          )
          as String);

  @override
  String get createdAt =>
      (super.noSuchMethod(
            Invocation.getter(#createdAt),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.getter(#createdAt),
            ),
          )
          as String);

  @override
  bool get isAnonymous =>
      (super.noSuchMethod(Invocation.getter(#isAnonymous), returnValue: false)
          as bool);

  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(
            Invocation.method(#toJson, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);
}

/// A class which mocks [AttachmentService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAttachmentService extends _i1.Mock implements _i14.AttachmentService {
  MockAttachmentService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i15.AttachmentBlockData?> pickAndUpload() =>
      (super.noSuchMethod(
            Invocation.method(#pickAndUpload, []),
            returnValue: _i6.Future<_i15.AttachmentBlockData?>.value(),
          )
          as _i6.Future<_i15.AttachmentBlockData?>);

  @override
  _i6.Future<_i15.AttachmentBlockData?> uploadFromBytes({
    required _i16.Uint8List? bytes,
    required String? filename,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#uploadFromBytes, [], {
              #bytes: bytes,
              #filename: filename,
            }),
            returnValue: _i6.Future<_i15.AttachmentBlockData?>.value(),
          )
          as _i6.Future<_i15.AttachmentBlockData?>);

  @override
  _i6.Future<_i16.Uint8List?> download(String? url) =>
      (super.noSuchMethod(
            Invocation.method(#download, [url]),
            returnValue: _i6.Future<_i16.Uint8List?>.value(),
          )
          as _i6.Future<_i16.Uint8List?>);

  @override
  _i6.Future<bool> delete(String? url) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [url]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  bool isSupported(String? mimeType) =>
      (super.noSuchMethod(
            Invocation.method(#isSupported, [mimeType]),
            returnValue: false,
          )
          as bool);
}
