// Mocks generated by Mockito 5.4.6 from annotations
// in duru_notes/test/services/analytics_goals_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:duru_notes/services/task_analytics_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeProductivityAnalytics_0 extends _i1.SmartFake
    implements _i2.ProductivityAnalytics {
  _FakeProductivityAnalytics_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTaskCompletionStats_1 extends _i1.SmartFake
    implements _i2.TaskCompletionStats {
  _FakeTaskCompletionStats_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTimeEstimationAccuracy_2 extends _i1.SmartFake
    implements _i2.TimeEstimationAccuracy {
  _FakeTimeEstimationAccuracy_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProductivityTrends_3 extends _i1.SmartFake
    implements _i2.ProductivityTrends {
  _FakeProductivityTrends_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePriorityDistribution_4 extends _i1.SmartFake
    implements _i2.PriorityDistribution {
  _FakePriorityDistribution_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDeadlineAdherenceMetrics_5 extends _i1.SmartFake
    implements _i2.DeadlineAdherenceMetrics {
  _FakeDeadlineAdherenceMetrics_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCategoryPerformance_6 extends _i1.SmartFake
    implements _i2.CategoryPerformance {
  _FakeCategoryPerformance_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProductivityInsights_7 extends _i1.SmartFake
    implements _i2.ProductivityInsights {
  _FakeProductivityInsights_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TaskAnalyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskAnalyticsService extends _i1.Mock
    implements _i2.TaskAnalyticsService {
  @override
  _i3.Future<_i2.ProductivityAnalytics> getProductivityAnalytics({
    DateTime? startDate,
    DateTime? endDate,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getProductivityAnalytics, [], {
              #startDate: startDate,
              #endDate: endDate,
            }),
            returnValue: _i3.Future<_i2.ProductivityAnalytics>.value(
              _FakeProductivityAnalytics_0(
                this,
                Invocation.method(#getProductivityAnalytics, [], {
                  #startDate: startDate,
                  #endDate: endDate,
                }),
              ),
            ),
            returnValueForMissingStub:
                _i3.Future<_i2.ProductivityAnalytics>.value(
                  _FakeProductivityAnalytics_0(
                    this,
                    Invocation.method(#getProductivityAnalytics, [], {
                      #startDate: startDate,
                      #endDate: endDate,
                    }),
                  ),
                ),
          )
          as _i3.Future<_i2.ProductivityAnalytics>);

  @override
  _i3.Future<_i2.TaskCompletionStats> getTaskCompletionStats(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getTaskCompletionStats, [startDate, endDate]),
            returnValue: _i3.Future<_i2.TaskCompletionStats>.value(
              _FakeTaskCompletionStats_1(
                this,
                Invocation.method(#getTaskCompletionStats, [
                  startDate,
                  endDate,
                ]),
              ),
            ),
            returnValueForMissingStub:
                _i3.Future<_i2.TaskCompletionStats>.value(
                  _FakeTaskCompletionStats_1(
                    this,
                    Invocation.method(#getTaskCompletionStats, [
                      startDate,
                      endDate,
                    ]),
                  ),
                ),
          )
          as _i3.Future<_i2.TaskCompletionStats>);

  @override
  _i3.Future<_i2.TimeEstimationAccuracy> getTimeEstimationAccuracy(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getTimeEstimationAccuracy, [startDate, endDate]),
            returnValue: _i3.Future<_i2.TimeEstimationAccuracy>.value(
              _FakeTimeEstimationAccuracy_2(
                this,
                Invocation.method(#getTimeEstimationAccuracy, [
                  startDate,
                  endDate,
                ]),
              ),
            ),
            returnValueForMissingStub:
                _i3.Future<_i2.TimeEstimationAccuracy>.value(
                  _FakeTimeEstimationAccuracy_2(
                    this,
                    Invocation.method(#getTimeEstimationAccuracy, [
                      startDate,
                      endDate,
                    ]),
                  ),
                ),
          )
          as _i3.Future<_i2.TimeEstimationAccuracy>);

  @override
  _i3.Future<_i2.ProductivityTrends> getProductivityTrends(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getProductivityTrends, [startDate, endDate]),
            returnValue: _i3.Future<_i2.ProductivityTrends>.value(
              _FakeProductivityTrends_3(
                this,
                Invocation.method(#getProductivityTrends, [startDate, endDate]),
              ),
            ),
            returnValueForMissingStub: _i3.Future<_i2.ProductivityTrends>.value(
              _FakeProductivityTrends_3(
                this,
                Invocation.method(#getProductivityTrends, [startDate, endDate]),
              ),
            ),
          )
          as _i3.Future<_i2.ProductivityTrends>);

  @override
  _i3.Future<_i2.PriorityDistribution> getPriorityDistribution(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getPriorityDistribution, [startDate, endDate]),
            returnValue: _i3.Future<_i2.PriorityDistribution>.value(
              _FakePriorityDistribution_4(
                this,
                Invocation.method(#getPriorityDistribution, [
                  startDate,
                  endDate,
                ]),
              ),
            ),
            returnValueForMissingStub:
                _i3.Future<_i2.PriorityDistribution>.value(
                  _FakePriorityDistribution_4(
                    this,
                    Invocation.method(#getPriorityDistribution, [
                      startDate,
                      endDate,
                    ]),
                  ),
                ),
          )
          as _i3.Future<_i2.PriorityDistribution>);

  @override
  _i3.Future<_i2.DeadlineAdherenceMetrics> getDeadlineAdherenceMetrics(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getDeadlineAdherenceMetrics, [
              startDate,
              endDate,
            ]),
            returnValue: _i3.Future<_i2.DeadlineAdherenceMetrics>.value(
              _FakeDeadlineAdherenceMetrics_5(
                this,
                Invocation.method(#getDeadlineAdherenceMetrics, [
                  startDate,
                  endDate,
                ]),
              ),
            ),
            returnValueForMissingStub:
                _i3.Future<_i2.DeadlineAdherenceMetrics>.value(
                  _FakeDeadlineAdherenceMetrics_5(
                    this,
                    Invocation.method(#getDeadlineAdherenceMetrics, [
                      startDate,
                      endDate,
                    ]),
                  ),
                ),
          )
          as _i3.Future<_i2.DeadlineAdherenceMetrics>);

  @override
  _i3.Future<_i2.CategoryPerformance> getCategoryPerformance(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getCategoryPerformance, [startDate, endDate]),
            returnValue: _i3.Future<_i2.CategoryPerformance>.value(
              _FakeCategoryPerformance_6(
                this,
                Invocation.method(#getCategoryPerformance, [
                  startDate,
                  endDate,
                ]),
              ),
            ),
            returnValueForMissingStub:
                _i3.Future<_i2.CategoryPerformance>.value(
                  _FakeCategoryPerformance_6(
                    this,
                    Invocation.method(#getCategoryPerformance, [
                      startDate,
                      endDate,
                    ]),
                  ),
                ),
          )
          as _i3.Future<_i2.CategoryPerformance>);

  @override
  _i3.Future<_i2.ProductivityInsights> getProductivityInsights(
    _i2.ProductivityAnalytics? analytics,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getProductivityInsights, [analytics]),
            returnValue: _i3.Future<_i2.ProductivityInsights>.value(
              _FakeProductivityInsights_7(
                this,
                Invocation.method(#getProductivityInsights, [analytics]),
              ),
            ),
            returnValueForMissingStub:
                _i3.Future<_i2.ProductivityInsights>.value(
                  _FakeProductivityInsights_7(
                    this,
                    Invocation.method(#getProductivityInsights, [analytics]),
                  ),
                ),
          )
          as _i3.Future<_i2.ProductivityInsights>);

  @override
  _i3.Future<String> exportAnalyticsAsCSV(
    _i2.ProductivityAnalytics? analytics,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#exportAnalyticsAsCSV, [analytics]),
            returnValue: _i3.Future<String>.value(
              _i4.dummyValue<String>(
                this,
                Invocation.method(#exportAnalyticsAsCSV, [analytics]),
              ),
            ),
            returnValueForMissingStub: _i3.Future<String>.value(
              _i4.dummyValue<String>(
                this,
                Invocation.method(#exportAnalyticsAsCSV, [analytics]),
              ),
            ),
          )
          as _i3.Future<String>);
}
