// Mocks generated by Mockito 5.4.6 from annotations
// in duru_notes/test/services/import_encryption_indexing_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:duru_notes/core/crypto/crypto_box.dart' as _i3;
import 'package:duru_notes/core/monitoring/app_logger.dart' as _i9;
import 'package:duru_notes/core/parser/note_indexer.dart' as _i8;
import 'package:duru_notes/data/local/app_db.dart' as _i2;
import 'package:duru_notes/domain/entities/note.dart' as _i7;
import 'package:duru_notes/infrastructure/repositories/notes_core_repository.dart'
    as _i5;
import 'package:duru_notes/services/analytics/analytics_service.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:supabase_flutter/supabase_flutter.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeAppDb_0 extends _i1.SmartFake implements _i2.AppDb {
  _FakeAppDb_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCryptoBox_1 extends _i1.SmartFake implements _i3.CryptoBox {
  _FakeCryptoBox_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSupabaseClient_2 extends _i1.SmartFake
    implements _i4.SupabaseClient {
  _FakeSupabaseClient_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [NotesCoreRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotesCoreRepository extends _i1.Mock
    implements _i5.NotesCoreRepository {
  @override
  _i2.AppDb get db =>
      (super.noSuchMethod(
            Invocation.getter(#db),
            returnValue: _FakeAppDb_0(this, Invocation.getter(#db)),
            returnValueForMissingStub: _FakeAppDb_0(
              this,
              Invocation.getter(#db),
            ),
          )
          as _i2.AppDb);

  @override
  _i3.CryptoBox get crypto =>
      (super.noSuchMethod(
            Invocation.getter(#crypto),
            returnValue: _FakeCryptoBox_1(this, Invocation.getter(#crypto)),
            returnValueForMissingStub: _FakeCryptoBox_1(
              this,
              Invocation.getter(#crypto),
            ),
          )
          as _i3.CryptoBox);

  @override
  _i4.SupabaseClient get client =>
      (super.noSuchMethod(
            Invocation.getter(#client),
            returnValue: _FakeSupabaseClient_2(
              this,
              Invocation.getter(#client),
            ),
            returnValueForMissingStub: _FakeSupabaseClient_2(
              this,
              Invocation.getter(#client),
            ),
          )
          as _i4.SupabaseClient);

  @override
  _i6.Future<_i7.Note?> getNoteById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getNoteById, [id]),
            returnValue: _i6.Future<_i7.Note?>.value(),
            returnValueForMissingStub: _i6.Future<_i7.Note?>.value(),
          )
          as _i6.Future<_i7.Note?>);

  @override
  _i6.Future<_i7.Note?> createOrUpdate({
    required String? title,
    required String? body,
    String? id,
    String? folderId,
    List<String>? tags = const [],
    List<Map<String, String?>>? links = const [],
    Map<String, dynamic>? attachmentMeta,
    Map<String, dynamic>? metadataJson,
    bool? isPinned,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createOrUpdate, [], {
              #title: title,
              #body: body,
              #id: id,
              #folderId: folderId,
              #tags: tags,
              #links: links,
              #attachmentMeta: attachmentMeta,
              #metadataJson: metadataJson,
              #isPinned: isPinned,
              #createdAt: createdAt,
              #updatedAt: updatedAt,
            }),
            returnValue: _i6.Future<_i7.Note?>.value(),
            returnValueForMissingStub: _i6.Future<_i7.Note?>.value(),
          )
          as _i6.Future<_i7.Note?>);

  @override
  _i6.Future<void> updateLocalNote(
    String? id, {
    String? title,
    String? body,
    bool? deleted,
    String? folderId,
    bool? updateFolder = false,
    Map<String, dynamic>? attachmentMeta,
    Map<String, dynamic>? metadata,
    List<Map<String, String?>>? links,
    bool? isPinned,
    DateTime? updatedAt,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #updateLocalNote,
              [id],
              {
                #title: title,
                #body: body,
                #deleted: deleted,
                #folderId: folderId,
                #updateFolder: updateFolder,
                #attachmentMeta: attachmentMeta,
                #metadata: metadata,
                #links: links,
                #isPinned: isPinned,
                #updatedAt: updatedAt,
              },
            ),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> deleteNote(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteNote, [id]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<_i7.Note>> localNotesForSync() =>
      (super.noSuchMethod(
            Invocation.method(#localNotesForSync, []),
            returnValue: _i6.Future<List<_i7.Note>>.value(<_i7.Note>[]),
            returnValueForMissingStub: _i6.Future<List<_i7.Note>>.value(
              <_i7.Note>[],
            ),
          )
          as _i6.Future<List<_i7.Note>>);

  @override
  _i6.Future<List<_i7.Note>> localNotes() =>
      (super.noSuchMethod(
            Invocation.method(#localNotes, []),
            returnValue: _i6.Future<List<_i7.Note>>.value(<_i7.Note>[]),
            returnValueForMissingStub: _i6.Future<List<_i7.Note>>.value(
              <_i7.Note>[],
            ),
          )
          as _i6.Future<List<_i7.Note>>);

  @override
  _i6.Future<List<_i7.Note>> getRecentlyViewedNotes({int? limit = 5}) =>
      (super.noSuchMethod(
            Invocation.method(#getRecentlyViewedNotes, [], {#limit: limit}),
            returnValue: _i6.Future<List<_i7.Note>>.value(<_i7.Note>[]),
            returnValueForMissingStub: _i6.Future<List<_i7.Note>>.value(
              <_i7.Note>[],
            ),
          )
          as _i6.Future<List<_i7.Note>>);

  @override
  _i6.Future<List<_i7.Note>> listAfter(DateTime? cursor, {int? limit = 20}) =>
      (super.noSuchMethod(
            Invocation.method(#listAfter, [cursor], {#limit: limit}),
            returnValue: _i6.Future<List<_i7.Note>>.value(<_i7.Note>[]),
            returnValueForMissingStub: _i6.Future<List<_i7.Note>>.value(
              <_i7.Note>[],
            ),
          )
          as _i6.Future<List<_i7.Note>>);

  @override
  _i6.Future<void> toggleNotePin(String? noteId) =>
      (super.noSuchMethod(
            Invocation.method(#toggleNotePin, [noteId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> setNotePin(String? noteId, bool? isPinned) =>
      (super.noSuchMethod(
            Invocation.method(#setNotePin, [noteId, isPinned]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<_i7.Note>> getPinnedNotes() =>
      (super.noSuchMethod(
            Invocation.method(#getPinnedNotes, []),
            returnValue: _i6.Future<List<_i7.Note>>.value(<_i7.Note>[]),
            returnValueForMissingStub: _i6.Future<List<_i7.Note>>.value(
              <_i7.Note>[],
            ),
          )
          as _i6.Future<List<_i7.Note>>);

  @override
  _i6.Stream<List<_i7.Note>> watchNotes({
    String? folderId,
    List<String>? anyTags,
    List<String>? noneTags,
    bool? pinnedFirst = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#watchNotes, [], {
              #folderId: folderId,
              #anyTags: anyTags,
              #noneTags: noneTags,
              #pinnedFirst: pinnedFirst,
            }),
            returnValue: _i6.Stream<List<_i7.Note>>.empty(),
            returnValueForMissingStub: _i6.Stream<List<_i7.Note>>.empty(),
          )
          as _i6.Stream<List<_i7.Note>>);

  @override
  _i6.Future<List<_i7.Note>> list({int? limit}) =>
      (super.noSuchMethod(
            Invocation.method(#list, [], {#limit: limit}),
            returnValue: _i6.Future<List<_i7.Note>>.value(<_i7.Note>[]),
            returnValueForMissingStub: _i6.Future<List<_i7.Note>>.value(
              <_i7.Note>[],
            ),
          )
          as _i6.Future<List<_i7.Note>>);

  @override
  _i6.Future<void> sync() =>
      (super.noSuchMethod(
            Invocation.method(#sync, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> pushAllPending() =>
      (super.noSuchMethod(
            Invocation.method(#pushAllPending, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> pullSince(DateTime? since) =>
      (super.noSuchMethod(
            Invocation.method(#pullSince, [since]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<DateTime?> getLastSyncTime() =>
      (super.noSuchMethod(
            Invocation.method(#getLastSyncTime, []),
            returnValue: _i6.Future<DateTime?>.value(),
            returnValueForMissingStub: _i6.Future<DateTime?>.value(),
          )
          as _i6.Future<DateTime?>);

  @override
  _i6.Future<int> getNotesCountInFolder(String? folderId) =>
      (super.noSuchMethod(
            Invocation.method(#getNotesCountInFolder, [folderId]),
            returnValue: _i6.Future<int>.value(0),
            returnValueForMissingStub: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);

  @override
  _i6.Future<List<String>> getNoteIdsInFolder(String? folderId) =>
      (super.noSuchMethod(
            Invocation.method(#getNoteIdsInFolder, [folderId]),
            returnValue: _i6.Future<List<String>>.value(<String>[]),
            returnValueForMissingStub: _i6.Future<List<String>>.value(
              <String>[],
            ),
          )
          as _i6.Future<List<String>>);
}

/// A class which mocks [NoteIndexer].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoteIndexer extends _i1.Mock implements _i8.NoteIndexer {
  @override
  _i6.Future<void> indexNote(_i7.Note? note) =>
      (super.noSuchMethod(
            Invocation.method(#indexNote, [note]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> removeNoteFromIndex(String? noteId) =>
      (super.noSuchMethod(
            Invocation.method(#removeNoteFromIndex, [noteId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  Set<String> findNotesByTag(String? tag) =>
      (super.noSuchMethod(
            Invocation.method(#findNotesByTag, [tag]),
            returnValue: <String>{},
            returnValueForMissingStub: <String>{},
          )
          as Set<String>);

  @override
  Set<String> findNotesLinkingTo(String? noteId) =>
      (super.noSuchMethod(
            Invocation.method(#findNotesLinkingTo, [noteId]),
            returnValue: <String>{},
            returnValueForMissingStub: <String>{},
          )
          as Set<String>);

  @override
  Set<String> searchNotes(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchNotes, [query]),
            returnValue: <String>{},
            returnValueForMissingStub: <String>{},
          )
          as Set<String>);

  @override
  Map<String, int> getIndexStats() =>
      (super.noSuchMethod(
            Invocation.method(#getIndexStats, []),
            returnValue: <String, int>{},
            returnValueForMissingStub: <String, int>{},
          )
          as Map<String, int>);

  @override
  _i6.Future<void> clearIndex() =>
      (super.noSuchMethod(
            Invocation.method(#clearIndex, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> rebuildIndex(List<_i7.Note>? allNotes) =>
      (super.noSuchMethod(
            Invocation.method(#rebuildIndex, [allNotes]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}

/// A class which mocks [AppLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLogger extends _i1.Mock implements _i9.AppLogger {
  @override
  void debug(String? message, {Map<String, dynamic>? data}) =>
      super.noSuchMethod(
        Invocation.method(#debug, [message], {#data: data}),
        returnValueForMissingStub: null,
      );

  @override
  void info(String? message, {Map<String, dynamic>? data}) =>
      super.noSuchMethod(
        Invocation.method(#info, [message], {#data: data}),
        returnValueForMissingStub: null,
      );

  @override
  void warning(String? message, {Map<String, dynamic>? data}) =>
      super.noSuchMethod(
        Invocation.method(#warning, [message], {#data: data}),
        returnValueForMissingStub: null,
      );

  @override
  void warn(String? message, {Map<String, dynamic>? data}) =>
      super.noSuchMethod(
        Invocation.method(#warn, [message], {#data: data}),
        returnValueForMissingStub: null,
      );

  @override
  void error(
    String? message, {
    Object? error,
    StackTrace? stackTrace,
    Map<String, dynamic>? data,
  }) => super.noSuchMethod(
    Invocation.method(
      #error,
      [message],
      {#error: error, #stackTrace: stackTrace, #data: data},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void breadcrumb(String? message, {Map<String, dynamic>? data}) =>
      super.noSuchMethod(
        Invocation.method(#breadcrumb, [message], {#data: data}),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> flush() =>
      (super.noSuchMethod(
            Invocation.method(#flush, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}

/// A class which mocks [AnalyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalyticsService extends _i1.Mock implements _i10.AnalyticsService {
  @override
  bool get isEnabled =>
      (super.noSuchMethod(
            Invocation.getter(#isEnabled),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void startTiming(String? eventName) => super.noSuchMethod(
    Invocation.method(#startTiming, [eventName]),
    returnValueForMissingStub: null,
  );

  @override
  void endTiming(String? eventName, {Map<String, dynamic>? properties}) =>
      super.noSuchMethod(
        Invocation.method(#endTiming, [eventName], {#properties: properties}),
        returnValueForMissingStub: null,
      );

  @override
  void featureUsed(String? featureName, {Map<String, dynamic>? properties}) =>
      super.noSuchMethod(
        Invocation.method(
          #featureUsed,
          [featureName],
          {#properties: properties},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void trackError(
    String? message, {
    String? context,
    Map<String, dynamic>? properties,
  }) => super.noSuchMethod(
    Invocation.method(
      #trackError,
      [message],
      {#context: context, #properties: properties},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void event(String? name, {Map<String, dynamic>? properties}) =>
      super.noSuchMethod(
        Invocation.method(#event, [name], {#properties: properties}),
        returnValueForMissingStub: null,
      );

  @override
  void enable() => super.noSuchMethod(
    Invocation.method(#enable, []),
    returnValueForMissingStub: null,
  );

  @override
  void disable() => super.noSuchMethod(
    Invocation.method(#disable, []),
    returnValueForMissingStub: null,
  );
}
