// Mocks generated by Mockito 5.4.6 from annotations
// in duru_notes/test/services/share_extension_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:typed_data' as _i11;

import 'package:duru_notes/core/crypto/crypto_box.dart' as _i3;
import 'package:duru_notes/core/monitoring/app_logger.dart' as _i12;
import 'package:duru_notes/data/local/app_db.dart' as _i2;
import 'package:duru_notes/data/remote/supabase_note_api.dart' as _i5;
import 'package:duru_notes/models/note_block.dart' as _i10;
import 'package:duru_notes/repository/notes_repository.dart' as _i6;
import 'package:duru_notes/services/analytics/analytics_service.dart' as _i13;
import 'package:duru_notes/services/attachment_service.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:supabase_flutter/supabase_flutter.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAppDb_0 extends _i1.SmartFake implements _i2.AppDb {
  _FakeAppDb_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCryptoBox_1 extends _i1.SmartFake implements _i3.CryptoBox {
  _FakeCryptoBox_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSupabaseClient_2 extends _i1.SmartFake
    implements _i4.SupabaseClient {
  _FakeSupabaseClient_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSupabaseNoteApi_3 extends _i1.SmartFake
    implements _i5.SupabaseNoteApi {
  _FakeSupabaseNoteApi_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [NotesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotesRepository extends _i1.Mock implements _i6.NotesRepository {
  MockNotesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AppDb get db =>
      (super.noSuchMethod(
            Invocation.getter(#db),
            returnValue: _FakeAppDb_0(this, Invocation.getter(#db)),
          )
          as _i2.AppDb);

  @override
  _i3.CryptoBox get crypto =>
      (super.noSuchMethod(
            Invocation.getter(#crypto),
            returnValue: _FakeCryptoBox_1(this, Invocation.getter(#crypto)),
          )
          as _i3.CryptoBox);

  @override
  _i4.SupabaseClient get client =>
      (super.noSuchMethod(
            Invocation.getter(#client),
            returnValue: _FakeSupabaseClient_2(
              this,
              Invocation.getter(#client),
            ),
          )
          as _i4.SupabaseClient);

  @override
  String get userId =>
      (super.noSuchMethod(
            Invocation.getter(#userId),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.getter(#userId),
            ),
          )
          as String);

  @override
  _i5.SupabaseNoteApi get api =>
      (super.noSuchMethod(
            Invocation.getter(#api),
            returnValue: _FakeSupabaseNoteApi_3(this, Invocation.getter(#api)),
          )
          as _i5.SupabaseNoteApi);

  @override
  _i8.Future<String> createOrUpdate({
    required String? title,
    required String? body,
    String? id,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createOrUpdate, [], {
              #title: title,
              #body: body,
              #id: id,
            }),
            returnValue: _i8.Future<String>.value(
              _i7.dummyValue<String>(
                this,
                Invocation.method(#createOrUpdate, [], {
                  #title: title,
                  #body: body,
                  #id: id,
                }),
              ),
            ),
          )
          as _i8.Future<String>);

  @override
  _i8.Future<_i2.LocalNote?> getNote(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getNote, [id]),
            returnValue: _i8.Future<_i2.LocalNote?>.value(),
          )
          as _i8.Future<_i2.LocalNote?>);

  @override
  _i8.Future<void> delete(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [id]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> pushAllPending() =>
      (super.noSuchMethod(
            Invocation.method(#pushAllPending, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> pullSince(DateTime? since) =>
      (super.noSuchMethod(
            Invocation.method(#pullSince, [since]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<Set<String>> fetchRemoteActiveIds() =>
      (super.noSuchMethod(
            Invocation.method(#fetchRemoteActiveIds, []),
            returnValue: _i8.Future<Set<String>>.value(<String>{}),
          )
          as _i8.Future<Set<String>>);

  @override
  _i8.Future<void> reconcileHardDeletes(Set<String>? remoteActiveIds) =>
      (super.noSuchMethod(
            Invocation.method(#reconcileHardDeletes, [remoteActiveIds]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<List<_i2.LocalNote>> list() =>
      (super.noSuchMethod(
            Invocation.method(#list, []),
            returnValue: _i8.Future<List<_i2.LocalNote>>.value(
              <_i2.LocalNote>[],
            ),
          )
          as _i8.Future<List<_i2.LocalNote>>);

  @override
  _i8.Future<List<_i2.LocalNote>> listAfter(
    DateTime? cursor, {
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#listAfter, [cursor], {#limit: limit}),
            returnValue: _i8.Future<List<_i2.LocalNote>>.value(
              <_i2.LocalNote>[],
            ),
          )
          as _i8.Future<List<_i2.LocalNote>>);

  @override
  _i8.Future<List<_i2.LocalNote>> listWithOffset({
    int? limit = 20,
    int? offset = 0,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#listWithOffset, [], {
              #limit: limit,
              #offset: offset,
            }),
            returnValue: _i8.Future<List<_i2.LocalNote>>.value(
              <_i2.LocalNote>[],
            ),
          )
          as _i8.Future<List<_i2.LocalNote>>);

  @override
  _i8.Future<String> createOrUpdateFolder({
    required String? name,
    required String? parentId,
    String? id,
    String? color,
    String? icon,
    String? description,
    int? sortOrder,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createOrUpdateFolder, [], {
              #name: name,
              #parentId: parentId,
              #id: id,
              #color: color,
              #icon: icon,
              #description: description,
              #sortOrder: sortOrder,
            }),
            returnValue: _i8.Future<String>.value(
              _i7.dummyValue<String>(
                this,
                Invocation.method(#createOrUpdateFolder, [], {
                  #name: name,
                  #parentId: parentId,
                  #id: id,
                  #color: color,
                  #icon: icon,
                  #description: description,
                  #sortOrder: sortOrder,
                }),
              ),
            ),
          )
          as _i8.Future<String>);

  @override
  _i8.Future<_i2.LocalFolder?> getFolder(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getFolder, [id]),
            returnValue: _i8.Future<_i2.LocalFolder?>.value(),
          )
          as _i8.Future<_i2.LocalFolder?>);

  @override
  _i8.Future<List<_i2.LocalFolder>> listFolders() =>
      (super.noSuchMethod(
            Invocation.method(#listFolders, []),
            returnValue: _i8.Future<List<_i2.LocalFolder>>.value(
              <_i2.LocalFolder>[],
            ),
          )
          as _i8.Future<List<_i2.LocalFolder>>);

  @override
  _i8.Future<List<_i2.LocalFolder>> getRootFolders() =>
      (super.noSuchMethod(
            Invocation.method(#getRootFolders, []),
            returnValue: _i8.Future<List<_i2.LocalFolder>>.value(
              <_i2.LocalFolder>[],
            ),
          )
          as _i8.Future<List<_i2.LocalFolder>>);

  @override
  _i8.Future<List<_i2.LocalFolder>> getChildFolders(String? parentId) =>
      (super.noSuchMethod(
            Invocation.method(#getChildFolders, [parentId]),
            returnValue: _i8.Future<List<_i2.LocalFolder>>.value(
              <_i2.LocalFolder>[],
            ),
          )
          as _i8.Future<List<_i2.LocalFolder>>);

  @override
  _i8.Future<List<_i2.LocalFolder>> getFolderHierarchy() =>
      (super.noSuchMethod(
            Invocation.method(#getFolderHierarchy, []),
            returnValue: _i8.Future<List<_i2.LocalFolder>>.value(
              <_i2.LocalFolder>[],
            ),
          )
          as _i8.Future<List<_i2.LocalFolder>>);

  @override
  _i8.Future<void> deleteFolder(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteFolder, [id]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> moveFolder(String? folderId, String? newParentId) =>
      (super.noSuchMethod(
            Invocation.method(#moveFolder, [folderId, newParentId]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> pushAllPendingFolders() =>
      (super.noSuchMethod(
            Invocation.method(#pushAllPendingFolders, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> pullFoldersSince(DateTime? since) =>
      (super.noSuchMethod(
            Invocation.method(#pullFoldersSince, [since]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> pullNoteFolderRelationsSince(DateTime? since) =>
      (super.noSuchMethod(
            Invocation.method(#pullNoteFolderRelationsSince, [since]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<Set<String>> fetchRemoteActiveFolderIds() =>
      (super.noSuchMethod(
            Invocation.method(#fetchRemoteActiveFolderIds, []),
            returnValue: _i8.Future<Set<String>>.value(<String>{}),
          )
          as _i8.Future<Set<String>>);

  @override
  _i8.Future<void> reconcileFolderHardDeletes(Set<String>? remoteActiveIds) =>
      (super.noSuchMethod(
            Invocation.method(#reconcileFolderHardDeletes, [remoteActiveIds]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> addNoteToFolder(String? noteId, String? folderId) =>
      (super.noSuchMethod(
            Invocation.method(#addNoteToFolder, [noteId, folderId]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> removeNoteFromFolder(String? noteId) =>
      (super.noSuchMethod(
            Invocation.method(#removeNoteFromFolder, [noteId]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> moveNoteToFolder(String? noteId, String? folderId) =>
      (super.noSuchMethod(
            Invocation.method(#moveNoteToFolder, [noteId, folderId]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<List<_i2.LocalNote>> getNotesInFolder(String? folderId) =>
      (super.noSuchMethod(
            Invocation.method(#getNotesInFolder, [folderId]),
            returnValue: _i8.Future<List<_i2.LocalNote>>.value(
              <_i2.LocalNote>[],
            ),
          )
          as _i8.Future<List<_i2.LocalNote>>);

  @override
  _i8.Future<List<_i2.LocalNote>> getUnfiledNotes() =>
      (super.noSuchMethod(
            Invocation.method(#getUnfiledNotes, []),
            returnValue: _i8.Future<List<_i2.LocalNote>>.value(
              <_i2.LocalNote>[],
            ),
          )
          as _i8.Future<List<_i2.LocalNote>>);

  @override
  _i8.Future<_i2.LocalFolder?> getFolderForNote(String? noteId) =>
      (super.noSuchMethod(
            Invocation.method(#getFolderForNote, [noteId]),
            returnValue: _i8.Future<_i2.LocalFolder?>.value(),
          )
          as _i8.Future<_i2.LocalFolder?>);

  @override
  _i8.Future<void> validateAndRepairFolderStructure() =>
      (super.noSuchMethod(
            Invocation.method(#validateAndRepairFolderStructure, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> resolveFolderConflicts() =>
      (super.noSuchMethod(
            Invocation.method(#resolveFolderConflicts, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> cleanupOrphanedRelationships() =>
      (super.noSuchMethod(
            Invocation.method(#cleanupOrphanedRelationships, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<Map<String, dynamic>> performFolderHealthCheck() =>
      (super.noSuchMethod(
            Invocation.method(#performFolderHealthCheck, []),
            returnValue: _i8.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i8.Future<Map<String, dynamic>>);
}

/// A class which mocks [AttachmentService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAttachmentService extends _i1.Mock implements _i9.AttachmentService {
  MockAttachmentService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i10.AttachmentBlockData?> pickAndUpload() =>
      (super.noSuchMethod(
            Invocation.method(#pickAndUpload, []),
            returnValue: _i8.Future<_i10.AttachmentBlockData?>.value(),
          )
          as _i8.Future<_i10.AttachmentBlockData?>);

  @override
  _i8.Future<_i10.AttachmentBlockData?> uploadFromBytes({
    required _i11.Uint8List? bytes,
    required String? filename,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#uploadFromBytes, [], {
              #bytes: bytes,
              #filename: filename,
            }),
            returnValue: _i8.Future<_i10.AttachmentBlockData?>.value(),
          )
          as _i8.Future<_i10.AttachmentBlockData?>);

  @override
  _i8.Future<_i11.Uint8List?> download(String? url) =>
      (super.noSuchMethod(
            Invocation.method(#download, [url]),
            returnValue: _i8.Future<_i11.Uint8List?>.value(),
          )
          as _i8.Future<_i11.Uint8List?>);

  @override
  _i8.Future<bool> delete(String? url) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [url]),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  bool isSupported(String? mimeType) =>
      (super.noSuchMethod(
            Invocation.method(#isSupported, [mimeType]),
            returnValue: false,
          )
          as bool);
}

/// A class which mocks [AppLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLogger extends _i1.Mock implements _i12.AppLogger {
  MockAppLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void debug(String? message, {Map<String, dynamic>? data}) =>
      super.noSuchMethod(
        Invocation.method(#debug, [message], {#data: data}),
        returnValueForMissingStub: null,
      );

  @override
  void info(String? message, {Map<String, dynamic>? data}) =>
      super.noSuchMethod(
        Invocation.method(#info, [message], {#data: data}),
        returnValueForMissingStub: null,
      );

  @override
  void warning(String? message, {Map<String, dynamic>? data}) =>
      super.noSuchMethod(
        Invocation.method(#warning, [message], {#data: data}),
        returnValueForMissingStub: null,
      );

  @override
  void warn(String? message, {Map<String, dynamic>? data}) =>
      super.noSuchMethod(
        Invocation.method(#warn, [message], {#data: data}),
        returnValueForMissingStub: null,
      );

  @override
  void error(
    String? message, {
    Object? error,
    StackTrace? stackTrace,
    Map<String, dynamic>? data,
  }) => super.noSuchMethod(
    Invocation.method(
      #error,
      [message],
      {#error: error, #stackTrace: stackTrace, #data: data},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void breadcrumb(String? message, {Map<String, dynamic>? data}) =>
      super.noSuchMethod(
        Invocation.method(#breadcrumb, [message], {#data: data}),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> flush() =>
      (super.noSuchMethod(
            Invocation.method(#flush, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);
}

/// A class which mocks [AnalyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalyticsService extends _i1.Mock implements _i13.AnalyticsService {
  MockAnalyticsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isEnabled =>
      (super.noSuchMethod(Invocation.getter(#isEnabled), returnValue: false)
          as bool);

  @override
  void startTiming(String? eventName) => super.noSuchMethod(
    Invocation.method(#startTiming, [eventName]),
    returnValueForMissingStub: null,
  );

  @override
  void endTiming(String? eventName, {Map<String, dynamic>? properties}) =>
      super.noSuchMethod(
        Invocation.method(#endTiming, [eventName], {#properties: properties}),
        returnValueForMissingStub: null,
      );

  @override
  void featureUsed(String? featureName, {Map<String, dynamic>? properties}) =>
      super.noSuchMethod(
        Invocation.method(
          #featureUsed,
          [featureName],
          {#properties: properties},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void trackError(
    String? message, {
    String? context,
    Map<String, dynamic>? properties,
  }) => super.noSuchMethod(
    Invocation.method(
      #trackError,
      [message],
      {#context: context, #properties: properties},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void event(String? name, {Map<String, dynamic>? properties}) =>
      super.noSuchMethod(
        Invocation.method(#event, [name], {#properties: properties}),
        returnValueForMissingStub: null,
      );

  @override
  void enable() => super.noSuchMethod(
    Invocation.method(#enable, []),
    returnValueForMissingStub: null,
  );

  @override
  void disable() => super.noSuchMethod(
    Invocation.method(#disable, []),
    returnValueForMissingStub: null,
  );
}
