name: CI - Build & Test

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

env:
  FLUTTER_VERSION: '3.35.3'
  JAVA_VERSION: '21'

jobs:
  # Job 1: Code Quality & Analysis
  analyze:
    name: Code Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Ensure CMake 3.10.2 for argon2_ffi
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake
          cmake --version

          SDK_ROOT="${ANDROID_SDK_ROOT:-$ANDROID_HOME}"
          if [ -z "$SDK_ROOT" ]; then
            echo "Android SDK root is not set" >&2
            exit 1
          fi

          SDKMANAGER=""
          if [ -x "$SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" ]; then
            SDKMANAGER="$SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
          elif [ -x "$SDK_ROOT/cmdline-tools/bin/sdkmanager" ]; then
            SDKMANAGER="$SDK_ROOT/cmdline-tools/bin/sdkmanager"
          elif command -v sdkmanager >/dev/null 2>&1; then
            SDKMANAGER="$(command -v sdkmanager)"
          fi

          if [ -z "$SDKMANAGER" ]; then
            echo "sdkmanager not found in Android SDK" >&2
            exit 1
          fi

          yes | "$SDKMANAGER" "cmake;3.10.2.4988404"

      - name: Get dependencies
        run: flutter pub get

      - name: Verify formatting
        run: dart format --set-exit-if-changed .

      - name: Analyze code
        run: flutter analyze

      - name: Check for outdated dependencies
        run: flutter pub outdated || true

  # Job 2: Unit & Widget Tests
  test:
    name: Unit & Widget Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Ensure CMake 3.10.2 for argon2_ffi
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake
          cmake --version

          SDK_ROOT="${ANDROID_SDK_ROOT:-$ANDROID_HOME}"
          if [ -z "$SDK_ROOT" ]; then
            echo "Android SDK root is not set" >&2
            exit 1
          fi

          SDKMANAGER=""
          if [ -x "$SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" ]; then
            SDKMANAGER="$SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
          elif [ -x "$SDK_ROOT/cmdline-tools/bin/sdkmanager" ]; then
            SDKMANAGER="$SDK_ROOT/cmdline-tools/bin/sdkmanager"
          elif command -v sdkmanager >/dev/null 2>&1; then
            SDKMANAGER="$(command -v sdkmanager)"
          fi

          if [ -z "$SDKMANAGER" ]; then
            echo "sdkmanager not found in Android SDK" >&2
            exit 1
          fi

          yes | "$SDKMANAGER" "cmake;3.10.2.4988404"

      - name: Get dependencies
        run: flutter pub get

      - name: Run tests with coverage
        run: flutter test --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Generate coverage report
        run: |
          dart pub global activate coverage
          dart pub global run coverage:format_coverage \
            --lcov \
            --in=coverage \
            --out=coverage/lcov.info \
            --packages=.dart_tool/package_config.json \
            --report-on=lib

  # Job 3: Android Build
  build-android:
    name: Build Android APK/AAB
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [analyze]

    strategy:
      matrix:
        flavor: [dev, staging, prod]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'

      - name: Ensure CMake 3.10.2 for argon2_ffi
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake
          cmake --version

          SDK_ROOT="${ANDROID_SDK_ROOT:-$ANDROID_HOME}"
          if [ -z "$SDK_ROOT" ]; then
            echo "Android SDK root is not set" >&2
            exit 1
          fi

          SDKMANAGER=""
          if [ -x "$SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" ]; then
            SDKMANAGER="$SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
          elif [ -x "$SDK_ROOT/cmdline-tools/bin/sdkmanager" ]; then
            SDKMANAGER="$SDK_ROOT/cmdline-tools/bin/sdkmanager"
          elif command -v sdkmanager >/dev/null 2>&1; then
            SDKMANAGER="$(command -v sdkmanager)"
          fi

          if [ -z "$SDKMANAGER" ]; then
            echo "sdkmanager not found in Android SDK" >&2
            exit 1
          fi

          yes | "$SDKMANAGER" "cmake;3.10.2.4988404"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Setup environment files
        run: |
          cat <<'EOF' > assets/env/.env.dev
          ${{ secrets.ENV_DEV }}
          EOF
          cat <<'EOF' > assets/env/.env.staging
          ${{ secrets.ENV_STAGING }}
          EOF
          cat <<'EOF' > assets/env/.env.prod
          ${{ secrets.ENV_PROD }}
          EOF

      - name: Setup Firebase config
        run: |
          cat <<'EOF' > android/app/google-services.json
          ${{ secrets.GOOGLE_SERVICES_JSON }}
          EOF

      - name: Build APK
        run: flutter build apk --release --flavor ${{ matrix.flavor }}

      - name: Build App Bundle (prod only)
        if: matrix.flavor == 'prod'
        run: flutter build appbundle --release --flavor prod

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-${{ matrix.flavor }}
          path: build/app/outputs/flutter-apk/app-${{ matrix.flavor }}-release.apk
          retention-days: 7

      - name: Upload AAB artifact (prod only)
        if: matrix.flavor == 'prod'
        uses: actions/upload-artifact@v4
        with:
          name: android-aab-prod
          path: build/app/outputs/bundle/prodRelease/app-prod-release.aab
          retention-days: 30

  # Job 4: iOS Build
  build-ios:
    name: Build iOS IPA
    runs-on: macos-14
    timeout-minutes: 40
    needs: [analyze]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Latest Xcode
        run: |
          # Find and select the latest available Xcode version
          LATEST_XCODE=$(ls -d /Applications/Xcode*.app 2>/dev/null | sort -V | tail -1)
          if [ -z "$LATEST_XCODE" ]; then
            LATEST_XCODE="/Applications/Xcode.app"
          fi
          echo "Using Xcode at: $LATEST_XCODE"
          sudo xcode-select -s "$LATEST_XCODE/Contents/Developer"
          xcodebuild -version

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Setup CMake for argon2_ffi (macOS)
        run: |
          brew install cmake
          cmake --version

      - name: Get dependencies
        run: flutter pub get

      - name: Setup environment files
        run: |
          cat <<'EOF' > assets/env/.env.prod
          ${{ secrets.ENV_PROD }}
          EOF

      - name: Setup Firebase config
        run: |
          cat <<'EOF' > ios/Runner/GoogleService-Info.plist
          ${{ secrets.GOOGLE_SERVICE_INFO_PLIST }}
          EOF

      - name: Reset CocoaPods workspace
        run: |
          cd ios
          rm -rf Pods Podfile.lock .symlinks
          pod cache clean --all || true

      - name: Install CocoaPods
        run: |
          cd ios
          pod install --repo-update

      - name: Build iOS (no codesign for CI)
        run: flutter build ios --release --no-codesign

      - name: Archive build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-logs
          path: /Users/runner/Library/Logs/Flutter/
          retention-days: 7

  # Job 5: Integration Tests (Optional)
  integration-tests:
    name: Integration Tests
    runs-on: macos-14
    timeout-minutes: 45
    if: false  # Disabled: No real device-based integration tests exist. Widget tests moved to test/ directory. Re-enable when implementing real integration tests.

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Start iOS Simulator
        run: |
          xcrun simctl boot "iPhone 15 Pro" || true
          sleep 5

      - name: Run integration tests
        run: flutter test integration_test/ --device-id=booted

  # Job 6: Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 7: Build Status Report
  report:
    name: Build Status Report
    runs-on: ubuntu-latest
    needs: [analyze, test, build-android, build-ios]
    if: always()

    steps:
      - name: Report Status
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Analysis: ${{ needs.analyze.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Android Build: ${{ needs.build-android.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- iOS Build: ${{ needs.build-ios.result }}" >> $GITHUB_STEP_SUMMARY
